@create +Stress Object

@@ Set DB_SHEET to the DBref of the +Sheet Object. This example assumes that the +Sheet Object is #6.
&DB_SHEET +Stress Object=#6

@link +Stress Object = #2
@set +Stress Object = WIZARD !NO_COMMAND
&ANSI +Stress Object=ansi(rh,strfirstof(%0,<+stress>))
&CMD +Stress Object=
&CMD`STRESS +Stress Object=$+stress:@pemit %#=u(v(db_sheet)/fun`sheet`stress,%#)
&CMD`STRESS/CLEAR +Stress Object=$+stress/clear:@pemit %#=u(ansi) You clear the stress from your [itemize(setr(s,iter(get(%#/_sheet`stress`data`tracks),first(%i0,`),|,|)),|)] track[switch(words(%qs,|),1,,s)].[iter(setunion(lattr(%#/_sheet`stress`tracks`*),lattr(%#/_sheet`stress`tracks`*`toughness)),attrib_set(%#/%i0,[delete(repeat(%bO,words(get(%#/%i0))),0,1)]),,)]
&CMD`STRESS/CON/CLEAR +Stress Object=$+stress/con/clear *:@pemit %#=u(ansi) [switch(0,[@@(Valid consequence designation? Sets 'is track-specific' into %qs, track/level into %q0, num into %q1, and name into %q<name>.)]u(fun`desig`con,%0,%#,0,1,s,name),%qe,[@@(Is that consequence currently full? Sets attribute into %q<att> and string into %q<con>.)]strlen(setr(con,u(fun`con`show,get(%#/[setr(att,if(%qs,_sheet`stress`tracks`[edit(%q0,%b,_)]`mild`%q1,_sheet`stress`cons`[edit(%q0,%b,_)]))])))),Your %q<name> consequence slot is empty.,[@@(Is it already recovering?)]eq(ord(*),ord(left(%q<con>,1))),Your %q<name> consequence "%q<con>" is not in recovery. To shortcut through the recovery process[chr(44)] use [u(ansi,+stress/con/forceclear %0=<justification>)],You clear your [setr(z,%q<name> consequence[chr(44)] "%q<con>")][oemit(%#,u(ansi) %k clears %p %qz)][cemit(+Stress,%k clears %p %qz,1)][attrib_set(%#/%q<att>`time)][if(%qs,attrib_set(%#/%q<att>,),[attrib_set(%#/%q<att>)])])]
&CMD`STRESS/CON/FORCECLEAR +Stress Object=$+stress/con/forceclear *=*:@pemit %#=u(ansi) [switch(0,[@@(Valid consequence designation? Sets 'is track-specific' into %qs, track/level into %q0, num into %q1, and name into %q<name>.)]u(fun`desig`con,%0,%#,0,1,s,name),%qe,[@@(Is that consequence currently full? Sets attribute into %q<att> and string into %q<con>.)]strlen(setr(con,u(fun`con`show,get(%#/[setr(att,if(%qs,_sheet`stress`tracks`[edit(%q0,%b,_)]`mild`%q1,_sheet`stress`cons`[edit(%q0,%b,_)]))])))),Your %q<name> consequence slot is empty.,You force-clear your [setr(z,%q<name> consequence[chr(44)] "%q<con>"[chr(44)] with justification "%1")][attrib_set(%#/%q<att>,)][oemit(%#,u(ansi) %k force-clears %p %qz)][cemit(+Stress,%k clears %p %qz,1)])]
&CMD`STRESS/CON/MOVE +Stress Object=$+stress/con/move *=*:@pemit %#=u(ansi) [switch(0,[@@(Valid consequence designation? Sets 'is track-specific' into %qs, track/level into %q0, num into %q1, and name into %q<name>.)]u(fun`desig`con,%0,%#,0,1,s,name),%qe,[@@(Is that consequence currently full? Sets attribute into %q<att> and string into %q<con>.)]strlen(setr(con,u(fun`con`show,get(%#/[setr(att,if(%qs,_sheet`stress`tracks`[edit(%q0,%b,_)]`mild`%q1,_sheet`stress`cons`[edit(%q0,%b,_)]))])))),Your %q<name> consequence slot is empty.,[@@(Is %1 a valid consequence designation? Sets 'is track-specific' into %q<sb>, track/level into %q<0b>, num into %q<1b>, name into %q<nameb>, and attribute into %q<attb>.)]u(fun`desig`con,%1,%#,0b,1b,sb,nameb)[setq(attb,if(%q<sb>,_sheet`stress`tracks`[edit(%q<0b>,%b,_)]`mild`%q<1b>,_sheet`stress`cons`[edit(%q<0b>,%b,_)]))],%qe,[@@(Are they different?)]not(strmatch(%q<att>,%q<attb>)),There is no point in 'moving' a consequence into the slot it already occupies.,[@@(Is that consequence currently empty? Sets string into %q<conb>.)]not(strlen(setr(conb,u(fun`con`show,get(%#/%q<attb>))))),Your %q<nameb> consequence slot is already full.,You move your %q<name> consequence "%q<con>" into your %q<nameb> slot.[oemit(%#,u(ansi) %k moves %p %q<name> consequence "%q<con>" into %p %q<nameb> slot.)][cemit(+Stress,%k moves %p %q<name> consequence "%q<con>" into %p %q<nameb> slot.,1)][setq(y,1)])];@assert %qy;@mvattr %#/%q<att>`time=%#/%q<attb>`time;@mvattr %#/%q<att>=%#/%q<attb>
&CMD`STRESS/CON/RECOVER +Stress Object=$+stress/con/recover *=*:@pemit %#=u(ansi) [switch(0,[@@(Valid consequence designation? Sets 'is track-specific' into %qs, track/level into %q0, num into %q1, and name into %q<name>.)]u(fun`desig`con,%0,%#,0,1,s,name),%qe,[@@(Is that consequence currently full? Sets attribute into %q<att> and string into %q<con>.)]strlen(setr(con,u(fun`con`show,get(%#/[setr(att,if(%qs,_sheet`stress`tracks`[edit(%q0,%b,_)]`mild`%q1,_sheet`stress`cons`[edit(%q0,%b,_)]))])))),Your %q<name> consequence slot is empty.,[@@(Is it not already recovering?)]neq(ord(*),ord(left(%q<con>,1))),Your %q<name> consequence "%q<con>" is already in recovery.,As of [time()][chr(44)] your set your [setr(z,%q<name> consequence "%q<con>" into recovery[chr(44)] with justification "%1")][oemit(%#,u(ansi) %k sets %p %qz)][cemit(+Stress,%k sets %p %qz,1)][attrib_set(%#/%q<att>,*[get(%#/%q<att>)])][attrib_set(%#/%q<att>`time,[time()])])]
&CMD`STRESS/CON/RENAME +Stress Object=$+stress/con/rename *=*:@pemit %#=u(ansi) [switch(0,[@@(Valid consequence designation? Sets 'is track-specific' into %qs, track/level into %q0, num into %q1, and name into %q<name>.)]u(fun`desig`con,%0,%#,0,1,s,name),%qe,[@@(Is that consequence currently full? Sets attribute into %q<att> and string into %q<con>.)]strlen(setr(con,u(fun`con`show,get(%#/[setr(att,if(%qs,_sheet`stress`tracks`[edit(%q0,%b,_)]`mild`%q1,_sheet`stress`cons`[edit(%q0,%b,_)]))])))),Your %q<name> consequence slot is empty.,[@@(Have they avoided putting *s into the name?)]neq(ord(*),ord(left(%1,1))),You may not start a consequence name with *.,[@@(Have they avoided backquotes?)]not(strmatch(%1,*`*)),You may not use backquotes in consequence names.,You rename your [setr(z,[if(setr(r,eq(ord(*),ord(left(%q<con>,1)))),recovering%b)]%q<name> consequence "%q<con>" to "[u(fun`con`show,setr(con2,[if(%qr,*)]%1`[last(get(%#/%q<att>),`)]))]".)][oemit(%#,u(ansi) %k renames %p %qz)][cemit(+Stress,%k renames %p %qz,1)][attrib_set(%#/%q<att>,%q<con2>)])]
&CMD`STRESS/CON/SET +Stress Object=$+stress/con/set *=*:@pemit %#=u(ansi) [switch(0,[@@(Valid stress track? Sets track into %q0 and edited name into %q<track>. If no track given, assumes the first track in _sheet`stress`data`tracks.)]complete(setr(0,iter(get(%#/_sheet`stress`data`tracks),first(%i0,`),|,|)),switch(%0,*/*,first(%0,/),first(%q0,|)),track,0,|)[setq(track,edit(%q0,%b,_))],%qe,[@@(Valid con level? Sets con level into %q1.)]complete(iter(get(%#/_sheet`stress`data`cons),first(%i0,`),|,|),last(%0,/),consequence level,1,|),%qe,[@@(Is there an empty slot of that type? Sets filters list of attributes into %q<att>.)]words(setr(att,filter(#lambda/not(strlen(get(%#/%%0))),[switch(%q1,Mild*,lattr(%#/_sheet`stress`tracks`%q<track>`mild`*)%b)]_sheet`STRESS`CONS`[EDIT(%q1,%b,_)]))),[switch(%q1,Mild*,All your Mild %q0 consequence slots are,Your %q1 consequence slot is)] full.,[@@(Have they avoided putting *s in the name?)]neq(ord(*),ord(left(%1,1))),You may not start a consequence name with *.,[@@(Have they avoided putting `s in the name?)]not(strmatch(%1,*`*)),You may not put backquotes in consequence names.,You fill your [setr(z,[switch(setr(att,first(%q<att>)),_sheet`stress`cons`**,general-use %q1,[ordinal(last(%q<att>,`))] bonus Mild %q0)] consequence slot with the new %q0 consequence "%1".)][oemit(%#,u(ansi) %k fills %p %qz)][cemit(+Stress,%k fills %p %qz,1)][attrib_set(%#/%q<att>,%1`%q0)])]
&CMD`STRESS/CON/UNRECOVER +Stress Object=$+stress/con/unrecover *:@pemit %#=u(ansi) [switch(0,[@@(Valid consequence designation? Sets 'is track-specific' into %qs, track/level into %q0, num into %q1, and name into %q<name>.)]u(fun`desig`con,%0,%#,0,1,s,name),%qe,[@@(Is that consequence currently full? Sets attribute into %q<att> and string into %q<con>.)]strlen(setr(con,u(fun`con`show,get(%#/[setr(att,if(%qs,_sheet`stress`tracks`[edit(%q0,%b,_)]`mild`%q1,_sheet`stress`cons`[edit(%q0,%b,_)]))])))),Your %q<name> consequence slot is empty.,[@@(Is it already recovering?)]eq(ord(*),ord(left(%q<con>,1))),Your %q<name> consequence "%q<con>" is not in recovery.,You take your [setr(z,%q<name> consequence "%q<con>" out of recovery.)][oemit(%#,u(ansi) %k takes %p %qz)][cemit(+Stress,%k takes %p %qz,1)][attrib_set(%#/%q<att>,[delete([get(%#/%q<att>)],0,1)])][attrib_set(%#/%q<att>`time)])]
&CMD`STRESS/CONS +Stress Object=$+stress/cons *:@pemit %#=u(ansi) [switch(0,[@@(Valid player? Sets DB into %q0 and name into %qn.)]t(setr(0,locate(%#,%0,Pym)))[setq(n,moniker(%q0))],'%0' is not a player.,[@@(Any consequences? Sets the filtered attributes into %q<att>.)]t(setr(att,[filter(#lambda/t(strlen(get(%q0/%%0))),[lattr(%q0/_sheet`stress`cons`)] [iter(get(%q0/_sheet`stress`data`tracks),lattr(%q0/_sheet`stress`tracks`[edit(first(%i0,`),%b,_)]`mild`*),|)])])),[switch(%q0,%#,You don't,%qn doesn't)] have any consequences right now.,[switch(%q0,%#,Your,%qn's)] consequences:%r%r[iter(%q<att>,switch(rest(%i0,`),CONS`*,iter(edit(last(%$0,`),_,%b),capstr(lcstr(%i0))),iter(edit(elements(%$0,2,`),_,%b),capstr(lcstr(%i0))) [last(%i0,`)]): [u(fun`con`show,setr(1,get(%q0/%i0)))][if(eq(ord(*),ord(left(%q1,1))),%r%tRecovering since [get(%q0/%i0`time)])],,%r)])]
&CMD`STRESS/CONS-NOARG +Stress Object=$+stress/cons:@force %#=+stress/cons %#
&CMD`STRESS/DAMAGE +Stress Object=$+stress/damage *:@pemit %#=u(ansi) [switch(0,[@@(Valid stress track? Sets track into %q0. If no track given, assumes the first track in _sheet`stress`data`tracks.)]complete(setr(0,iter(get(%#/_sheet`stress`data`tracks),first(%i0,`),|,|)),switch(%0,*=*,first(%0,=),first(%q0,|)),track,0,|),%qe,[@@(Is %1 a valid int? Sets %1 into %q1.)]cand(isint(setr(1,last(%0,=))),gt(%q1,0)),Stress amount must be a whole number greater than zero.,[@@(Is %q1 within the track? Sets attribute name into %q<att>, mundane track into %qs, and toughness track into %qt.)]lte(%q1,setr(w,add(words(setr(s,get(%#/[setr(att,_sheet`stress`tracks`[edit(%q0,%b,_)])]))),words(setr(t,get(%#/%q<att>`toughness)))))),Your %q0 track only has %qw box[switch(%qw,1,,es)].,[@@(Is that box empty?)]match(elements(%qs %qt,%q1),O),Your %q0 box %q1 is already full. Try a higher box.,[@@(Split. Interrupt if that box is low enough to be caught within the mundane track.)]gt(%q1,words(%qs)),You take %q1 stress on your [setr(z,%q0 track. Result: [setr(s,replace(%qs,%q1,X))][switch(%qt,[@@(null string)],[@@(do nothing)],[@@(show toughness)] (%$0))].)][oemit(%#,u(ansi) %k takes %q1 stress on %p %qz)][attrib_set(%#/%q<att>,%qs)],You take %q1 stress on your [setr(z,%q0 track. Result: %qs ([setr(t,replace(%qt,sub(%q1,words(%qs)),X))]).)][oemit(%#,u(ansi) %k takes %q1 stress on %p %qz)][attrib_set(%#/%q<att>`toughness,%qt)])]
&CMD`STRESS/DAMAGE/CATCH +Stress Object=$+stress/damage/catch *:@pemit %#=u(ansi) [switch(0,[@@(Valid stress track? Sets track into %q0. If no track given, assumes the first track in _sheet`stress`data`tracks.)]complete(setr(0,iter(get(%#/_sheet`stress`data`tracks),first(%i0,`),|,|)),switch(%0,*=*,first(%0,=),first(%q0,|)),track,0,|),%qe,[@@(Is %1 a valid int? Sets %1 into %q1.)]cand(isint(setr(1,last(%0,=))),gt(%q1,0)),Stress amount must be a whole number greater than zero.,[@@(Is %q1 within the mundane track? Sets attribute name into %q<att> and current track into %qa.)]lte(%q1,words(setr(a,get(%#/[setr(att,_sheet`stress`tracks`[edit(%q0,%b,_)])])))),Your %q0 track only has [setr(w,words(%qa))] box[switch(%qw,1,,es)].,[@@(Is that box empty?)]match(O,elements(%qa,%q1)),Your %q0 box %q1 is already full. Try a higher box.,You take %q1 stress on your [setr(z,%q0 track. Result: [setr(a,replace(%qa,%q1,X))][switch(get(%#/%q<att>`toughness),[@@(null string)],[@@(do nothing)],[@@(show toughness)] (%$0))].)][oemit(%#,u(ansi) %k takes %q1 stress on %p %qz)][attrib_set(%#/%q<att>,%qa)])]
&FUN +Stress Object=
&FUN`CON +Stress Object=
&FUN`CON`SHOW +Stress Object=[@@(Takes consequence attribute contents %0 and returns proper consequence name.)]switch(%0,*`*,[first(%$0,`)] ([rest(%$0,`)]),%$0)
&FUN`DESIG +Stress Object=
&FUN`DESIG`CON +Stress Object=[@@(Takes designation %0, player %1, track/con register %2, num register %3, 'is track-specific' register %4, and name register %5. Designation is of the format 'consequence' or 'stress/num'. Name is either 'general-use <level>' or '<ordinal> bonus Mild <track>'. Returns 1 if designation successful, or 1 if successful, and saves any error in %qe.)]switch(0,[@@(Valid consequence designation? Sets 'is track-specific' into %3, and consequence level or track name into %1.)]if(setr(%4,strmatch(%0,*/*)),[@@(Is track-specific. Set track name into %2. If no track is given, assume the first in the list.)]complete(setr(%2,iter(get(%1/_sheet`stress`data`tracks),first(%i0,`),|,|)),strfirstof(first(%0,/),first(r(%2),|)),track,%2,|),[@@(Is general-use. Set consequence level into %2.)]complete(iter(get(%1/_sheet`stress`data`cons),first(%i0,`),|,|),%0,consequence level,%2,|)),0,[@@(If track-specific, is slot number a valid int? Sets slot number into %3.)]or(not(r(%4)),cand(isint(setr(%3,rest(%0,/))),gt(r(%3),0))),0[setq(e,Bonus [r(%2)] slot number must be a whole number greater than zero.)],[@@(If track-specific, do they have that many bonus slots?)]cor(not(r(%4)),hasattr(%1,_sheet`stress`tracks`[edit(r(%2),%b,_)]`mild`[r(%3)])),0[setq(e,You don't have [r(%3)] bonus Mild [r(%2)] consequence slot[switch(r(%3),1,,s)].)],1[setq(%5,[if(r(%4),[ordinal(r(%3))] bonus Mild [r(%2)],general-use [r(%2)])])])
