@@ GM (#76)
@create GM
@link GM = #11
@set GM = WIZARD
&ANSI GM=ansi(c,strfirstof(%0,<GM>))
&CMD GM=
&CMD`ruleset GM=$+ruleset *:@pemit %#=u(ansi) [switch(0,[@@(Valid object? Sets into %q0 and %qn.)]t(setr(0,locate(%#,%0,*)))[setq(n,moniker(%q0))],Can't find '%0',[switch(%q0,%#,Your,%qn's)] ruleset: [setr(q,moniker(setr(p,switch(type(%q0),PLAYER,parent(%q0),%q0))))]%r%r[iter(aspects`data`max aspects`data`names skills`data`list skills`data`cap skills`data`points skills`data`columns stress`data`tracks stress`data`minimum stress`data`cons stunts`data`free stunts`data`stunts-refresh refresh init`data`conflicts init`data`roll,ulocal(fun`ruleset`att,%q0,%i0),,%r%r)])]
&CMD`ruleset/CHOOSE GM=$+ruleset/choose *:@pemit %#=u(ansi) [switch(0,[@@(Valid ruleset? Sets DB into %q0.)]t(setr(0,locate(%!,%0,Ti)))[setq(n,moniker(%q0))],switch(%q0,#-1,Can't find a ruleset called '%0'.,#-2,Multiple rulesets match '%0'.),You swap to the ruleset '%qn'.)][setq(y,1)];@assert %qy;think [@@(Calculate backup number and save in %qb.)][setq(b,inc(nattr(%#/_backup*)))][@@(Handle all sheet attributes.)][iter(revwords(lattr(%#/_sheet`**)),[@@(Save in backup on the character.)][attrib_set(%#/[replace(%i0,1,_BACKUP%qb,`)],[get(%#/%i0)])][@@(Erase original.)][attrib_set(%#/%i0)],%b,)][@@(Set new parent.)][parent(%#,%q0)]
&CMD`rulesets GM=$+rulesets:@pemit %#=u(ansi) Supported rulesets:%r[iter(sort(lcon(%!),namei),name(%i0) (%i0),,%r)]
&FUN GM=
&FUN`ruleset GM=
&FUN`ruleset`ASPECTS GM=
&FUN`ruleset`ASPECTS`DATA GM=
&FUN`ruleset`ASPECTS`DATA`MAX GM=Players can have up to [u(ansi,%0)] aspect[switch(%0,1,,s)].
&FUN`ruleset`ASPECTS`DATA`NAMES GM=switch(%0,@@(null string),Aspects have no special titles.,capstr(itemize(iter(%$0,aspect [first(%i0,`)] has the title '[u(ansi,rest(%i0,`))]',|,|),|,and,;)).)
&FUN`ruleset`ATT GM=[@@(Takes object %0 and attribute %1. Displays appropriate elaboration using the 'fun`ruleset`<attribute>' attribute.)]%t%1: [get(%0/_sheet`%1)].%r[u(fun`ruleset`%1,get(%0/_sheet`%1))]
&FUN`ruleset`INIT GM=
&FUN`ruleset`INIT`DATA GM=
&FUN`ruleset`INIT`DATA`CONFLICTS GM=Conflict types include [itemize(iter(%0,u(ansi,first(%i0,`)) ([switch(rest(%i0,`),@@(null string),no skills listed,ties broken by [itemize(%$0,`)])]),|,|),|,and,;)].
&FUN`ruleset`INIT`DATA`ROLL GM=Players [u(ansi,if(%0,modify skills with dice,use skill bonuses))] to determine initiative order.
&FUN`ruleset`REFRESH GM=Players start with [u(ansi,%0)] refresh.
&FUN`ruleset`SKILLS GM=
&FUN`ruleset`SKILLS`DATA GM=
&FUN`ruleset`SKILLS`DATA`CAP GM=Player skills are capped at [u(ansi,ladder(%0))].
&FUN`ruleset`SKILLS`DATA`COLUMNS GM=Player skills [u(ansi,if(%0,DO,DO NOT))] obey column rules.
&FUN`ruleset`SKILLS`DATA`LIST GM=Players have the skill list [u(ansi,itemize(%0,|))].
&FUN`ruleset`SKILLS`DATA`POINTS GM=Players start with [u(ansi,%0)] skill point[switch(%0,1,,s)].
&FUN`ruleset`STRESS GM=
&FUN`ruleset`STRESS`DATA GM=
&FUN`ruleset`STRESS`DATA`CONS GM=Player characters have the following consequences: [u(ansi,itemize(iter(%0,first(%i0,`) (worth [last(%i0,`)] shifts),|,|),|))].
&FUN`ruleset`STRESS`DATA`MINIMUM GM=Stress tracks start at [u(ansi,%0)] box[switch(%0,1,,es)].
&FUN`ruleset`STRESS`DATA`TRACKS GM=Players have the stress tracks [u(ansi,itemize(iter(%0,[first(%i0,`)] ([switch(rest(%i0,`),@@(null string),unmodified,modified by [itemize(%$0,`)])]),|,|),|,and,;))].
&FUN`ruleset`STUNTS GM=
&FUN`ruleset`STUNTS`DATA GM=
&FUN`ruleset`STUNTS`DATA`FREE GM=Players get [u(ansi,%0)] free stunt[switch(%0,1,,s)].
&FUN`ruleset`STUNTS`DATA`STUNTS-REFRESH GM=Players get [u(ansi,setr(0,first(%0,:)))] stunt[switch(%q0,1,,s)] for every [u(ansi,last(%0,:))] refresh spent.
