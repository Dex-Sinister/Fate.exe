@@ GM (#76)
@create GM

@@ Set DB_RULESET to the name of the Ruleset Parent. This example assumes that the Ruleset Parent is #91.
&DB_RULESET GM=#91

@link GM = #11
@set GM = WIZARD
&ANSI GM=ansi(c,strfirstof(%0,<GM>))
&CMD GM=
&CMD`BACKUP GM=$+backup *:@pemit %#=u(ansi) You save your current character as backup [u(ansi,setr(0,inc(nattr(%#/_backup*))))], named "%0".[null(iter(revwords(lattr(%#/_sheet**)),attrib_set(%#/[replace(%i0,1,_BACKUP%q0,`)],[get(%#/%i0)])))][attrib_set(%#/_backup%q0,[parent(%#)] %0)]
&CMD`BACKUP/LOAD GM=$+backup/load *:@pemit %#=u(ansi) [switch(0,isint(%0),You must specify your backup by its number.,hasattr(%0,_backup%0),You don't have a backup numbered %0.,{You load your [ordinal(%0)] backed-up character: [rest(setr(1,get(%#/_backup%0)))], from [name(first(%q1))].}[wipe(%#/_sheet**)][null(parent(%#,first(%q1)))][iter(lattr(%#/_backup%0**),attrib_set(%#/[replace(%i0,1,_SHEET,`)],[get(%#/%i0)]),,)])]
&CMD`BACKUPS GM=$+backups:@pemit %#=u(ansi) [switch(0,t(setr(0,lattr(%#/_backup*))),You have no backups.,Your backed-up characters:%r%r[iter(sortby(lit(#lambda/sub(after(%0,_BACKUP),after(%1,_BACKUP))),%q0),[rjust(after(%i0,_BACKUP),3)]: [rest(setr(1,get(%#/%i0)))] ([name(first(%q1))] ([first(%q1)])),,%r)])]
&CMD`HOMEBREW GM=
&CMD`HOMEBREW`COPY GM=$+homebrew/copy *=*:@pemit %#=[u(ansi)] [switch(0,valid(name,%1),'%1' is not a valid object name. Try stripping out punctuation.,[@@(Valid original ruleset? Sets into %q0.)]t(setr(0,locate(%!,%0,Ti))),switch(%q0,#-1,Can't find the official ruleset '%0'.,#-2,More than one official ruleset matches '%1'.),{You create a new Homebrew object, based on the [name(%q0)] ruleset, and named '%0'. It is object [setr(1,create(%1,10))].[setq(y,1)]})];@assert %qy;@parent %q1=%q0;@chown/preserve %q1=%#;@tel %q1=%#;@set %q1=!halt
&CMD`HOMEBREW`CREATE GM=$+homebrew/create *:@pemit %#=switch(0,valid(name,%0),'%0' is not a valid object name. Try stripping out punctuation.,{You create a new Homebrew object, not based on any existing ruleset, and named '%0'. It is object [setr(0,create(%0,10))].[setq(y,1)]});@assert %qy;@parent %q0=[v(db_ruleset)];@chown/preserve %q0=%#;@tel %q0=%#;@set %q0=!halt
&CMD`HOMEBREW/CLEAR GM=$+homebrew/clear *>*/*:@pemit %#=u(ansi) [switch(0,[@@(Valid object? Sets into %q0 and %qn.)]setr(0,locate(%#,%0,Tina))[setq(n,moniker(%q0))],Can't find object '%0'.,[@@(Do they control it?)]controls(%#,%q0),You don't control %qn.,[@@(Is it a homebrew object?)]match(lparent(%q0),v(db_ruleset)),%qn is not a ruleset object. Create these with [u(ansi,+ruleset/create <name>)] or [u(ansi,+ruleset/copy <official ruleset>/<name>)].,[@@(Valid section? Sets into %q1.)]complete(iter(lattr(%!/data`extras`attributes`*),capstr(lcstr(last(%i0,`)))),%1,sheet section,1),Error: %qe,[@@(Valid attribute? Sets into %q2.)]complete(v(data`extras`attributes`%q1),first(%2,=),%q1 attribute,2),Error: %qe,[@@(If Track, valid stress track given after a =? Sets into %q3.)]cor(not(match(%q1,Track)),if(not(strmatch(%2,*=*)),0[setq(e,{For Track attributes, you must name the stress track after an =.})],complete(iter(get(%0/_sheet`stress`data`tracks),first(%i0,`),|,|),rest(%2,=),stress track,3,|))),Error: %qe,[@@(If Initiative/Bonus or Initiative/Speed, valid init given after a =? Sets into %q3.)]cor(not(and(match(Initiative,%q1),match(Bonus Speed,%q2))),if(not(strmatch(%2,*=*)),0[setq(e,{For Initiative/%q2, you must name the conflict type after a =.})],complete(iter(get(%0/_sheet`init`data`conflicts),first(%i0,`),|,|),rest(%2,=),conflict type,3,|))),Error: %qe,You clear [name(%q0)]'s %q1/%q2[switch(%q3,@@(null string),@@(do nothing),=%$0)].[attrib_set(%q0/_sheet`[switch(%q1,Track,stress`[edit(%q3,%b,_)]`%q2,Initiative,Init`Data`[switch(%q2,Bonus,[edit(%q3,%b,_)]`%q2,Speed,[edit(%q3,%b,_)]`%q2,%q2)],%q1`data`%q2)],)])]
&CMD`HOMEBREW/DEFAULT GM=$+homebrew/default *>*/*:@pemit %#=u(ansi) [switch(0,[@@(Valid object? Sets into %q0 and %qn.)]setr(0,locate(%#,%0,Tina))[setq(n,moniker(%q0))],Can't find object '%0'.,[@@(Do they control it?)]controls(%#,%q0),You don't control %qn.,[@@(Is it a homebrew object?)]match(lparent(%q0),v(db_ruleset)),%qn is not a ruleset object. Create these with [u(ansi,+ruleset/create <name>)] or [u(ansi,+ruleset/copy <official ruleset>/<name>)].,[@@(Valid section? Sets into %q1.)]complete(iter(lattr(%!/data`extras`attributes`*),capstr(lcstr(last(%i0,`)))),%1,sheet section,1),Error: %qe,[@@(Valid attribute? Sets into %q2.)]complete(v(data`extras`attributes`%q1),first(%2,=),%q1 attribute,2),Error: %qe,[@@(If Track, valid stress track given after a =? Sets into %q3.)]cor(not(match(%q1,Track)),if(not(strmatch(%2,*=*)),0[setq(e,{For Track attributes, you must name the stress track after an =.})],complete(iter(get(%0/_sheet`stress`data`tracks),first(%i0,`),|,|),rest(%2,=),stress track,3,|))),Error: %qe,[@@(If Initiative/Bonus or Initiative/Speed, valid init given after a =? Sets into %q3.)]cor(not(and(match(Initiative,%q1),match(Bonus Speed,%q2))),if(not(strmatch(%2,*=*)),0[setq(e,{For Initiative/%q2, you must name the conflict type after a =.})],complete(iter(get(%0/_sheet`init`data`conflicts),first(%i0,`),|,|),rest(%2,=),conflict type,3,|))),Error: %qe,You return [name(%q0)]'s %q1/%q2[switch(%q3,@@(null string),@@(do nothing),=%$0)] to the ruleset default.[attrib_set(%q0/_sheet`[switch(%q1,Track,stress`[edit(%q3,%b,_)]`%q2,Initiative,Init`Data`[switch(%q2,Bonus,[edit(%q3,%b,_)]`%q2,Speed,[edit(%q3,%b,_)]`%q2,%q2)],%q1`data`%q2)])])]
&CMD`HOMEBREW/SET GM=$+homebrew/set *>*/*=*:@pemit %#=u(ansi) [switch(0,[@@(Valid object? Sets into %q0 and %qn.)]setr(0,locate(%#,%0,Tina))[setq(n,moniker(%q0))],Can't find object '%0'.,[@@(Do they control it?)]controls(%#,%q0),You don't control %qn.,[@@(Is it a homebrew object?)]match(lparent(%q0),v(db_ruleset)),%qn is not a ruleset object. Create these with [u(ansi,+ruleset/create <name>)] or [u(ansi,+ruleset/copy <official ruleset>/<name>)].,[@@(Valid section? Sets into %q1.)]complete(iter(lattr(%!/data`extras`attributes`*),capstr(lcstr(last(%i0,`)))),%1,sheet section,1),Error: %qe,[@@(Valid attribute? Sets into %q3.)]complete(v(data`extras`attributes`%q1),%2,%q1 attribute,2),Error: %qe,[@@(Test for correct value. Gives target-object as %0 and target-value as %1.)][setq(e,No test exists for %q1/%q2.)]udefault(%!/fun`set`%q1`%q2,0,%q0,%3),Error: %qe,%qe)]
&CMD`MILESTONE GM=$+milestone/* *:@pemit %#=u(ansi) [switch(0,[@@(Valid milestone type? Sets into %q0.)]complete(cap major refresh significant,%0,milestone type,0),%qe,[@@(Valid player? Sets into %q1 and %qn.)]t(setr(1,locate(%#,%1,Pym)))[setq(n,moniker(%q1))],'%1' is not a valid player.,You give %qn a [switch(%q0,cap,skill-cap increase[chr(44)] to [ladder(setr(2,inc(get(%q1/[setr(a,_sheet`skills`data`cap)]))))][attrib_set(%q1/%qa,%q2)],major,major milestone[chr(44)] for a total of [setr(2,inc(get(%q1/[setr(a,_sheet`refresh)])))] refresh[attrib_set(%q1/%qa,%q2)] and [setr(2,inc(get(%q1/[setr(a,_sheet`skills`data`points)])))] skill point[switch(%q2,1,,s)][attrib_set(%q1/%qa,%q2)],refresh,refresh point[chr(44)] for a total of [setr(2,inc(get(%q1/[setr(a,_sheet`refresh)])))][attrib_set(%q1/%qa,%q2)],significant,significant milestone[chr(44)] for a total of [setr(2,inc(get(%q1/[setr(a,_sheet`skills`data`points)])))] skill point[switch(%q2,1,,s)][attrib_set(%q1/%qa,%q2)],ERROR)].)]
&CMD`RULESET GM=$+ruleset *:@pemit %#=u(ansi) [switch(0,[@@(Valid object? Sets into %q0 and %qn.)]t(setr(0,locate(%#,%0,*)))[setq(n,moniker(%q0))],Can't find '%0',[switch(%q0,%#,Your,%qn's)] ruleset: [setr(q,moniker(setr(p,switch(type(%q0),PLAYER,parent(%q0),%q0))))]%r%r[iter(aspects`data`max aspects`data`names skills`data`list skills`data`cap skills`data`points skills`data`columns stress`data`tracks stress`data`minimum stress`data`cons stunts`data`free stunts`data`stunts-refresh refresh init`data`conflicts init`data`roll,ulocal(fun`ruleset`att,%q0,%i0),,%r%r)])]
&CMD`RULESET/CHOOSE GM=$+ruleset/choose */*:@pemit %#=u(ansi) [switch(0,[@@(Valid type? Sets into %q0.)]complete(Homebrew Official Player,%0,ruleset source,0),Error: %qe,[@@(If Homebrew, looks for an object and sets it into %q1 and %qn.)]cor(not(match(Homebrew,%q0)),t(setr(1,locate(%#,%1,Tina)))[setq(n,moniker(%q1))]),Can't find homebrew object '%1'.,[@@(If Official, looks in the GM object.)]cor(not(match(Official,%q0)),t(setr(1,locate(%!,%1,Ti)))[setq(n,moniker(%q1))]),Can't find official ruleset object '%1'.,[@@(If Player, looks for a player.)]cor(not(match(Player,%q0)),t(setr(1,locate(%#,%1,Pym)))[setq(n,moniker(%q1))]),Can't find player '%1'.,You change to [switch(%q0,Homebrew,homebrew ruleset %qn,Official,official ruleset %qn,Player,the same ruleset as %qn ([setr(n,moniker(setr(1,parent(%q1))))]))].[@@(Wipe original sheet.)][wipe(%#/_sheet**)][@@(Set new parent.)][null(parent(%#,%q1))])]
&CMD`RULESET/HOMEBREW GM=$+ruleset/homebrew *:@pemit %#=u(ansi) [switch(0,[@@(Valid object? Sets into %q0.)]t(setr(0,locate(%#,%0,Tina)))[setq(n,moniker(%q0))],'%0' does not match any visible object or object number.,[@@(Valid ruleset object?)]match(lparent(%q0),v(db_ruleset)),%qn is not a ruleset object.,Starting stats for the homebrew ruleset '%qn' ([switch(parent(%q0),v(db_ruleset),not based on an existing ruleset,based on [name(%$0)])]):%r%r[u(fun`ruleset`show,%q0)])]
&CMD`RULESET/OFFICIAL GM=$+ruleset/official *:@pemit %#=u(ansi) [switch(0,[@@(Valid original ruleset? Sets into %q0.)]t(setr(0,locate(%!,%0,Ti))),switch(%q0,#-1,Can't find the official ruleset '%0'.,#-2,More than one official ruleset matches '%1'.),Starting stats for the official ruleset '[name(%q0)]':%r%r[u(fun`ruleset`show,%q0)])]
&CMD`RULESET/PLAYER GM=$+ruleset/player *:@pemit %#=u(ansi) [switch(0,[@@(Valid player? Sets into %q0.)]t(setr(0,locate(%#,%0,Pym))),Can't find player '%0'.,The rules for [moniker(%q0)] (based on [moniker(parent(%q0))] ([parent(%q0)])):%r%r[u(fun`ruleset`show,%q0)])]
&CMD`RULESETS GM=$+rulesets:@pemit %#=u(ansi) Supported rulesets:%r[iter(sort(lcon(%!),namei),name(%i0) (%i0),,%r)]
&DATA GM=
&DATA`EXTRAS GM=
&DATA`EXTRAS`ATTRIBUTES GM=
&DATA`EXTRAS`ATTRIBUTES`ASPECTS GM=Max Names
&DATA`EXTRAS`ATTRIBUTES`INITIATIVE GM=Conflicts Roll Bonus Speed
&DATA`EXTRAS`ATTRIBUTES`SKILLS GM=List Cap Points Columns
&DATA`EXTRAS`ATTRIBUTES`STRESS GM=Tracks Minimum Cons
&DATA`EXTRAS`ATTRIBUTES`STUNTS GM=Free Stunts-Refresh
&DATA`EXTRAS`ATTRIBUTES`TRACK GM=Bonus Override Toughness Cons
&FUN GM=
&FUN`RULESET GM=[iter(aspects`data`max aspects`data`names skills`data`list skills`data`cap skills`data`points skills`data`columns stress`data`tracks stress`data`minimum stress`data`cons stunts`data`free stunts`data`stunts-refresh refresh init`data`conflicts init`data`roll,ulocal(fun`ruleset`att,%0,%i0),,%r%r)]
&FUN`RULESET`ASPECTS GM=
&FUN`RULESET`ASPECTS`DATA GM=
&FUN`RULESET`ASPECTS`DATA`MAX GM=Players can have up to [u(ansi,%0)] aspect[switch(%0,1,,s)].
&FUN`RULESET`ASPECTS`DATA`NAMES GM=switch(%0,@@(null string),Aspects have no special titles.,capstr(itemize(iter(%$0,aspect [first(%i0,`)] has the title '[u(ansi,rest(%i0,`))]',|,|),|,and,;)).)
&FUN`RULESET`ATT GM=[@@(Takes object %0 and attribute %1. Displays appropriate elaboration using the 'fun`ruleset`<attribute>' attribute.)]%t%1: [get(%0/_sheet`%1)].%r[u(fun`ruleset`%1,get(%0/_sheet`%1))]
&FUN`RULESET`INIT GM=
&FUN`RULESET`INIT`DATA GM=
&FUN`RULESET`INIT`DATA`CONFLICTS GM=Conflict types include [itemize(iter(%0,u(ansi,first(%i0,`)) ([switch(rest(%i0,`),@@(null string),no skills listed,ties broken by [itemize(%$0,`)])]),|,|),|,and,;)].
&FUN`RULESET`INIT`DATA`ROLL GM=Players [u(ansi,if(%0,modify skills with dice,use skill bonuses))] to determine initiative order.
&FUN`RULESET`REFRESH GM=Players start with [u(ansi,%0)] refresh.
&FUN`RULESET`SHOW GM=[@@(Takes ruleset object %0 and shows all the ruleset information, including the +homebrew/set commands.)][iter(Aspects Skills Stress Stunts Initiative,%t%i0:%r[ulocal(fun`ruleset`show`%i0,%0)],,%r%r)]
&FUN`RULESET`SHOW`ASPECTS GM=[u(ansi,+homebrew/set %0>)]Aspects/Max=[u(ansi,setr(0,get(%0/_sheet`aspects`data`max)))]%r%t[name(%0)] may have up to [u(ansi,%q0)] character aspect[switch(%q0,1,,s)].%r[u(ansi,+homebrew/set %0>)]Aspects/Names=[u(ansi,switch(setr(0,get(%0/_sheet`aspects`data`names)),@@(null string),<blank>,%q0))]%r%t[switch(%$0,@@(blank),No aspects have special titles.,capstr(itemize(iter(%q0,aspect [u(ansi,first(%i0,`))] is titled '[u(ansi,rest(%i0,`))]',|,|),|,and,;)))].
&FUN`RULESET`SHOW`INITIATIVE GM=[u(ansi,+homebrew/set %0>)]Initiative/Conflicts=[u(ansi,setr(0,get(%0/_sheet`init`data`conflicts)))]%r%t[name(%0)] has initiative for [itemize(iter(%q0,u(ansi,first(%i0,`))[setq(s,insert(%qs,-1,first(%i0,`),|))] (order determined by [itemize(iter(rest(%i0,`),u(ansi,%i0),`,`),`)]),|,|),|,and,;)] conflict[switch(words(%q0,|),1,,s)].%r[u(ansi,+homebrew/set %0>)]Initiative/Roll=[u(ansi,setr(0,get(%0/_sheet`init`data`roll)))]%r%t[name(%0)] [u(ansi,switch(%q0,1,DOES,DOES NOT))] add dice to initiative skills.%r%r[iter(Bonus Speed,iter(%qs,[u(ansi,+homebrew/set %0>)]Initiative/%i1=%i0/[u(ansi,switch(setr(0,get(%0/_sheet`init`data`[edit(%i0,%b,_)]`%i1)),@@(null string),<blank>,%q0))]%r%t[switch(%i1,Bonus,{[name(%0)] has a +[u(ansi,switch(%q0,@@(null string),0,%q0))] bonus to %i0 initiative.},Speed,{[name(%0)] has [u(ansi,switch(%q0,@@(null string),normal,<1,normal,1,Inhuman,2,Supernatural,3,Mythic,Level %q0))] %i0 Speed.})],|,%r),,%r%r)]
&FUN`RULESET`SHOW`SKILLS GM=[u(ansi,+homebrew/set %0>)]Skills/List=[u(ansi,setr(0,get(%0/_sheet`skills`data`list)))]%r%tThe skill list is [itemize(iter(%q0,u(ansi,%i0),|,|),|)].%r[u(ansi,+homebrew/set %0>)]Skills/Cap=[u(ansi,setr(0,get(%0/_sheet`skills`data`cap)))]%r%tSkills are [switch(%q0,<1,u(ansi,not capped),capped at [u(ansi,ladder(%q0))])].%r[u(ansi,+homebrew/set %0>)]Skills/Points=[u(ansi,setr(0,get(%0/_sheet`skills`data`points)))]%r%t[name(%0)] has [u(ansi,%q0)] skill point[switch(%q0,1,,s)].%r[u(ansi,+homebrew/set %0>)]Skills/Columns=[u(ansi,setr(0,get(%0/_sheet`skills`data`columns)))]%r%tSkills [u(ansi,if(%q0,DO,DO NOT))] obey column rules.
&FUN`RULESET`SHOW`STRESS GM=[u(ansi,+homebrew/set %0>)]Stress/Tracks=[u(ansi,setr(0,get(%0/_sheet`stress`data`tracks)))]%r%t[name(%0)] has the stress tracks [itemize(iter(%q0,[u(ansi,setr(i,first(%i0,`))[setq(s,insert(%qs,-1,%qi,|))])] ([switch(rest(%i0,`),@@(null string),not modified,modified by [itemize(iter(%$0,u(ansi,%i0),`,`),`)])]),|,|),|,and,;)].%r[u(ansi,+homebrew/set %0>)]Stress/Minimum=[u(ansi,setr(0,get(%0/_sheet`stress`data`minimum)))]%r%t[name(%0)]'s stress tracks start at [u(ansi,%q0)] box[switch(%q0,1,,es)].%r[u(ansi,+homebrew/set %0>)]Stress/Cons=[u(ansi,setr(0,get(%0/_sheet`stress`data`cons)))]%r%t[name(%0)] has the general-use consequences [itemize(iter(%q0,u(ansi,first(%i0,`)) (worth [u(ansi,setr(1,rest(%i0,`)))] shift[switch(%q1,1,,s)]),|,|),|)].%r%r%tTrack:%r[iter(v(data`extras`attributes`track),iter(%qs,[u(ansi,+homebrew/set %0>)]Track/%i1=%i0/[u(ansi,switch(setr(0,get(%0/_sheet`stress`[edit(%i0,%b,_)]`%i1)),@@(null string),<blank>,%$0))]%r%t[switch(%i1,Bonus,[name(%0)]'s %i0 track has [u(ansi,switch(%q0,@@(null string),no,%q0))] bonus box[switch(%q0,1,,es)].,Override,{[switch(%q0,@@(null string),[name(%0)]'s %i0 track will be calculated normally.,{Regardless of minimums and skill levels, [name(%q0)]'s %i0 track will be [u(ansi,%q0)] box[switch(%q0,1,,es)] long (plus any Bonus).})]},Toughness,{[name(%0)]'s %i0 track has [u(ansi,switch(%q0,@@(null string),no,%$0))] 'Toughness' box[switch(%q0,1,,es)].},Cons,{[name(%0)] has [u(ansi,switch(%q0,@@(null string),no,%$0))] bonus mild %i0 consequence[switch(%q0,1,,s)]},{ERROR})],|,%r),,%r%r)]
&FUN`RULESET`SHOW`STUNTS GM=[u(ansi,+homebrew/set %0>)]Stunts/Free=[u(ansi,setr(0,get(%0/_sheet`stunts`data`free)))]%r%t[name(%0)] gets [u(ansi,%q0)] free stunt[switch(%q0,1,,s)].%r[u(ansi,+homebrew/set %0>)]Stunts/Stunts-Refresh=[u(ansi,setr(0,get(%0/_sheet`stunts`data`stunts-refresh)))]%r%tAfter the free stunts, [name(%0)] gets [u(ansi,setr(1,first(%q0,:)))] stunt[switch(%q1,1,,s)] for every [u(ansi,last(%q0,:))] refresh.
&FUN`RULESET`SKILLS GM=
&FUN`RULESET`SKILLS`DATA GM=
&FUN`RULESET`SKILLS`DATA`CAP GM=Player skills are capped at [u(ansi,ladder(%0))].
&FUN`RULESET`SKILLS`DATA`COLUMNS GM=Player skills [u(ansi,if(%0,DO,DO NOT))] obey column rules.
&FUN`RULESET`SKILLS`DATA`LIST GM=Players have the skill list [u(ansi,itemize(%0,|))].
&FUN`RULESET`SKILLS`DATA`POINTS GM=Players start with [u(ansi,%0)] skill point[switch(%0,1,,s)].
&FUN`RULESET`STRESS GM=
&FUN`RULESET`STRESS`DATA GM=
&FUN`RULESET`STRESS`DATA`CONS GM=Player characters have the following consequences: [u(ansi,itemize(iter(%0,first(%i0,`) (worth [last(%i0,`)] shifts),|,|),|))].
&FUN`RULESET`STRESS`DATA`MINIMUM GM=Stress tracks start at [u(ansi,%0)] box[switch(%0,1,,es)].
&FUN`RULESET`STRESS`DATA`TRACKS GM=Players have the stress tracks [u(ansi,itemize(iter(%0,[first(%i0,`)] ([switch(rest(%i0,`),@@(null string),unmodified,modified by [itemize(%$0,`)])]),|,|),|,and,;))].
&FUN`RULESET`STUNTS GM=
&FUN`RULESET`STUNTS`DATA GM=
&FUN`RULESET`STUNTS`DATA`FREE GM=Players get [u(ansi,%0)] free stunt[switch(%0,1,,s)].
&FUN`RULESET`STUNTS`DATA`STUNTS-REFRESH GM=Players get [u(ansi,setr(0,first(%0,:)))] stunt[switch(%q0,1,,s)] for every [u(ansi,last(%0,:))] refresh spent.
&FUN`SET GM=
&FUN`SET`ASPECTS GM=
&FUN`SET`ASPECTS`MAX GM=switch(0,[@@(Valid int?)]isint(%1),0[setq(e,Maximum aspects must be a whole number.)],[@@(Int > 0?)]gt(%1,0),0[setq(e,{The maximum must be at least 1. Without aspects, it's not Fate.})],1[setq(e,You set [name(%0)]'s Aspects/Max to [u(ansi,%1)].)][attrib_set(%0/_sheet`aspects`data`max,%1)])
&FUN`SET`ASPECTS`NAMES GM=switch(0,[@@(Correct format for all?)]lmath(and,iter(%1,strmatch(%i0,*`*),|)),0[setq(e,Aspect number and title must be separated by [u(ansi,`)] (to the left of 1 on US keyboards).)],[@@(Int, >0 and <max, for all?)][setq(m,get(%0/_sheet`aspects`data`max))]lmath(and,iter(%1,cand(isint(setr(i,first(%i0,`))),gt(%qi,0),lte(%qi,%qm)),|)),0[setq(e,{Aspect numbers must be whole numbers, greater than 0, and less than or equal to the maximum aspects ([u(ansi,%qm)]).})],[@@(Text given for all?)]lmath(and,iter(%1,gt(strlen(rest(%i0,`)),0),|)),0[setq(e,You must provide titles for all aspects you number.)],[@@(No repeats?)]eq(words(%1,|),words(setunion(iter(%1,first(%i0,`),|,|),,|),|)),0[setq(e,You must title each aspect only once.)],1[setq(e,[name(%0)]'s [itemize(iter(%1,u(ansi,ordinal(first(%i0,`))) aspect is titled '[u(ansi,rest(%i0,`))]',|,|),|,and,;)].)][attrib_set(%0/_sheet`aspects`data`names,%1)])
&FUN`SET`INITIATIVE GM=
&FUN`SET`INITIATIVE`BONUS GM=switch(0,[@@(Valid conflict? Sets into %qa and %qb.)][setq(b,rest(%1,/))]complete(iter(get(%0/_sheet`init`data`conflicts),first(%i0,`),|,|),first(%1,/),conflict type,a,|),0,[@@(Valid int?)]isint(%qb),0[setq(e,Initiative bonus value must be a whole number.)],1[setq(e,[name(%0)] now has a [u(ansi,switch(%qb,<0,%qb,+%qb))] modifier to %qa initiative.)][attrib_set(%0/_sheet`init`data`[edit(%qa,%b,_)]`bonus,%qb)])
&FUN`SET`INITIATIVE`CONFLICTS GM=switch(0,[@@(Valid skills for each?)]lmath(and,iter(%1,if(eq(1,words(%i0,`)),1[setq(a,insert(%qa,-1,%i0,|))],[setq(b,first(%i0,`))]lmath(and,iter(rest(%i0,`),if(complete(get(%0/_sheet`skills`data`list),%i0,skill,c,|),1[setq(b,insert(%qb,-1,%qc,`))][setq(f,insert(%qf,-1,'%qc' is okay.))],0[setq(f,insert(%qf,-1,%qe))]),`)[setq(a,insert(%qa,-1,%qb,|))])),|)),0[setq(e,%qf)],1[setq(e,[name(%0)] now has the conflict types [itemize(iter(%qa,u(ansi,first(%i0,`)) (order determined by [itemize(iter(rest(%i0,`),u(ansi,%i0),`,`),`)]),|,|),|,and,;)].)][attrib_set(%0/_sheet`init`data`conflicts,%qa)])
&FUN`SET`INITIATIVE`ROLL GM=switch(0,match(0 1,%1),0[setq(e,Value must be 0 (false) or 1 (true).)],1[setq(e,[name(%0)] now [u(ansi,if(%1,WILL,WILL NOT))] add dice to initiative values.)][attrib_set(%0/_sheet`init`data`roll,%1)])
&FUN`SET`INITIATIVE`SPEED GM=switch(0,[@@(Valid conflict? Sets into %qa and %qb.)][setq(b,rest(%1,/))]complete(iter(get(%0/_sheet`init`data`conflicts),first(%i0,`),|,|),first(%1,/),conflict type,a,|),0,[@@(Valid int?)]isint(%qb),0[setq(e,Speed value must be a whole number.)],1[setq(e,[name(%0)] now has [u(ansi,switch(%qb,<1,normal,1,Inhuman,2,Supernatural,3,Mythic,Level %$0))] %qa Speed.)][attrib_set(%0/_sheet`init`data`[edit(%qa,%b,_)]`speed,%qb)])
&FUN`SET`SKILLS GM=
&FUN`SET`SKILLS`CAP GM=switch(0,[@@(Int?)]isint(%1),0[setq(e,Skill cap must be a whole number.)],1[setq(e,You set [name(%0)] to [switch(%1,<1,have [u(ansi,no)] skill cap.,cap skills at [u(ansi,[ladder(%1)])])].)][attrib_set(%0/_sheet`skills`data`cap,%1)])
&FUN`SET`SKILLS`COLUMNS GM=switch(0,[@@(Match 1 or 0?)]match(0 1,%1),0[setq(e,Skills/Columns must be either 1 (true) or 0 (false).)],1[setq(e,[name(%0)]'s skills now [u(ansi,if(%1,DO,DO NOT))] obey column rules.)][attrib_set(%0/_sheet`skills`data`columns,%1)])
&FUN`SET`SKILLS`LIST GM=1[setq(e,You set [name(%0)]'s skill list to [itemize(iter(setr(a,sort(%1,i,|)),u(ansi,%i0),|,|),|)].)][attrib_set(%0/_sheet`skills`data`list,%1)]
&FUN`SET`SKILLS`POINTS GM=switch(0,[@@(Int?)]isint(%1),0[setq(e,Skill point total must be a whole number.)],[@@(> 0?)]gt(%1,0),0[setq(e,Skill point total must be above 0.)],1[setq(e,You set [name(%0)] to have [u(ansi,%1)] skill point[switch(%1,1,,s)].)][attrib_set(%0/_sheet`skills`data`points,%1)])
&FUN`SET`STRESS GM=
&FUN`SET`STRESS`CONS GM=switch(0,[@@(All have a valid number?)]lmath(iter(%1,cand(isint(rest(%i0,`)),gt(rest(%i0,`),0)),|)),0[setq(e,All consequence slots must have a whole-number shift value greater than zero.)],1[setq(e,[name(%0)] now has the following general-use consequences: [itemize(iter(%1,u(ansi,first(%i0,`)) (worth [setr(i,rest(%i0,1))] shift[switch(%qi,1,,s)]),|,|),|)].)][attrib_set(%0/_sheet`stress`data`cons,%1)])
&FUN`SET`STRESS`MINIMUM GM=switch(0,[@@(Int?)]isint(%1),0[setq(e,Stress minimum must be a whole number.)],[@@(%1 >= 0?)]gte(%1,0),0[setq(e,Stress minimum must be at least 0.)],1[setq(e,[name(%0)]'s stress tracks will now start at [u(ansi,%1)] box[switch(%1,1,,es)].)][attrib_set(%0/_sheet`stress`data`minimum,%1)])
&FUN`SET`STRESS`TRACKS GM=switch(0,[@@(Valid skills for each?)]lmath(and,iter(%1,if(eq(1,words(%i0,`)),1[setq(a,insert(%qa,-1,%i0,|))],[setq(b,first(%i0,`))]lmath(and,iter(rest(%i0,`),if(complete(get(%0/_sheet`skills`data`list),%i0,skill,c,|),1[setq(b,insert(%qb,-1,%qc,`))][setq(f,insert(%qf,-1,'%qc' is okay.))],0[setq(f,insert(%qf,-1,%qe))]),`)[setq(a,insert(%qa,-1,%qb,|))])),|)),0[setq(e,%qf)],1[setq(e,[name(%0)] now has the stress tracks [itemize(iter(%qa,u(ansi,first(%i0,`)) ([switch(rest(%i0,`),@@(null string),unmodified,modified by [itemize(iter(%$0,u(ansi,%i0),`,`),`)])]),|,|),|,and,;)].)][attrib_set(%0/_sheet`stress`data`tracks,%qa)])
&FUN`SET`STUNTS GM=
&FUN`SET`STUNTS`FREE GM=switch(0,[@@(Int?)]isint(%1),0[setq(e,Number of free stunts must be an integer.)],[@@(>= 0?)]gte(%1,0),0[setq(e,Number of free stunts cannot be less than zero.)],1[setq(e,[name(%0)] will now have %1 free stunt[switch(%1,1,,s)].)])
&FUN`SET`STUNTS`STUNTS-REFRESH GM=switch(0,lmath(and,iter(%1,cand(isint(%i0),gt(%i0,0)),:)),0[setq(e,Both number of stunts and amount of refresh must be whole numbers greater than zero.)],1[setq(e,[name(%0)] will now get [u(ansi,first(%1,:))] stunt[switch(first(%i0,:),1,,s)] for every [u(ansi,last(%i0,:))] refresh.)][attrib_set(%0/_sheet`stunts`data`stunts-refresh,%1)])
&FUN`SET`TRACK GM=
&FUN`SET`TRACK`BONUS GM=switch(0,[@@(Valid stress track? Sets into %qa and %qb.)][setq(b,rest(%1,/))]complete(iter(get(%0/_sheet`stress`data`tracks),first(%i0,`),|,|),first(%1,/),stress track,a,|),0,[@@(Valid int?)]cand(isint(%qb),gt(%qb,0)),0[setq(e,Stress bonus must be a whole number greater than zero.)],1[setq(e,[name(%0)] now has [u(ansi,%qb)] bonus %qa stress box[switch(%qb,1,,es)].)][attrib_set(%0/_sheet`stress`[edit(%qa,%b,_)]`bonus,%qb)])
&FUN`SET`TRACK`CONS GM=switch(0,[@@(Valid stress track? Sets into %qa and %qb.)][setq(b,rest(%1,/))]complete(iter(get(%0/_sheet`stress`data`tracks),first(%i0,`),|,|),first(%1,/),stress track,a,|),0,[@@(Valid int?)]cand(isint(%qb),gte(%qb,0)),0[setq(e,Bonus mild consequences must be a whole number greater than or equal to zero.)],1[setq(e,{[name(%0)] now has %qb bonus mild %qa consequence[switch(%qb,1,,s)].})][attrib_set(%0/_sheet`stress`[edit(%qa,%b,_)]`cons,%qb)])
&FUN`SET`TRACK`OVERRIDE GM=switch(0,[@@(Valid stress track? Sets into %qa and %qb.)][setq(b,rest(%1,/))]complete(iter(get(%0/_sheet`stress`data`tracks),first(%i0,`),|,|),first(%1,/),stress track,a,|),0,[@@(Valid int?)]cand(isint(%qb),gt(%qb,0)),0[setq(e,Stress override must be a whole number greater than zero.)],1[setq(e,{Regardless of minimums and skills, [name(%0)]'s %qa track will now be [u(ansi,%qb)] box[switch(%qb,1,,es)] before bonuses are applied.})][attrib_set(%0/_sheet`stress`[edit(%qa,%b,_)]`override,%qb)])
&FUN`SET`TRACK`TOUGHNESS GM=switch(0,[@@(Valid stress track? Sets into %qa and %qb.)][setq(b,rest(%1,/))]complete(iter(get(%0/_sheet`stress`data`tracks),first(%i0,`),|,|),first(%1,/),stress track,a,|),0,[@@(Valid int?)]cand(isint(%qb),gte(%qb,0)),0[setq(e,Toughness amount must be a whole number greater than or equal to zero.)],1[setq(e,{[name(%0)]'s %qa track now has %qb 'Toughness' box[switch(%qb,1,,es)].})][attrib_set(%0/_sheet`stress`[edit(%qa,%b,_)]`toughness,%qb)])
