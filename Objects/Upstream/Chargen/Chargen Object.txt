@create Chargen Object

@@ Set DB_SHEET to the DBref of the +Sheet Object. This example assumes that the +Sheet Object is #6.
&DB_SHEET Chargen Object=#6

@link Chargen Object = #0
@set Chargen Object = WIZARD !NO_COMMAND
&ANSI Chargen Object=ansi(g,strfirstof(%0,<CG>))
&CMD Chargen Object=
&CMD`ASPECTS Chargen Object=$+aspects:@pemit %#=u(v(db_sheet)/fun`sheet`aspects,%#)
&CMD`ASPECTS`NAME Chargen Object=$+aspects/name *:@break strmatch(%0,*=*);@pemit %#=u(ansi) [switch(0,[@@(Is it an integer greater than zero?)]cand(isint(%0),gt(%0,0)),Aspect number must be a whole number greater than zero.,[@@(Is it within their aspect limits? Sets max aspects into %qm.)]lte(%0,setr(m,get(%#/_sheet`aspects`data`max))),You can only have %qm aspect[switch(%qm,1,,s)].,[@@(Do they have it set? Sets full aspect list into %q<aspects> and target aspect into %q0.)]strlen(first(setr(0,elements(setr(aspects,get(%#/_sheet`aspects)),%0,|)),`)),There is no aspect to erase.,You erase your aspect %0.[setq(y,1)])];@assert %qy;think [attrib_set(%#/_sheet`aspects,[replace(%q<aspects>,%0,`,|)])]
&CMD`ASPECTS`NAME_ARG Chargen Object=$+aspects/name *=*:@pemit %#=u(ansi) [switch(0,[@@(Is it an integer greater than zero?)]cand(isint(%0),gt(%0,0)),Aspect number must be a whole number greater than zero.,[@@(Is it within their aspect limits? Sets max aspects into %qm.)]lte(%0,setr(m,get(%#/_sheet`aspects`data`max))),You can only have %qm aspect[switch(%qm,1,,s)].,[@@(Have they provided a name, or do they have the aspect set? Sets full aspect list into %q<aspects> and target aspect into %q0.)]or(strlen(%1),strlen(first(setr(0,elements(setr(aspects,get(%#/_sheet`aspects)),%0,|)),`))),There is no aspect to erase.,[@@(Have they provided a name?)]strlen(%1),You erase your aspect %0.[setq(y,1)],[@@(Do they avoid illegal ` and | characters?)]not(lmath(or,iter(` |,strmatch(%1,*%i0*)))),You may not use backquote (`) or pipe (|) characters in aspect names.,You name your aspect %0 '%1'[setq(y,1)])];@assert %qy;think [attrib_set(%#/_sheet`aspects,[replace(%q<aspects>[@@(Use repeat() in case the aspect list is not actually full.)][repeat(|`,sub(%qm,words(%q<aspects>,|)))],%0,%1`,|)])]
&CMD`ASPECTS`NOTE Chargen Object=$+aspects/note *:@break strmatch(%0,*=*);@pemit %#=u(ansi) [switch(0,[@@(Is it an integer greater than zero?)]cand(isint(%0),gt(%0,0)),Aspect number must be a whole number greater than zero.,[@@(Is it within their aspect limits? Sets max aspects into %qm.)]lte(%0,setr(m,get(%#/_sheet`aspects`data`max))),You can only have %qm aspect[switch(%qm,1,,s)].,[@@(Do they have it set? Sets full aspect list into %q<aspects> and target aspect into %q0.)]strlen(last(setr(0,elements(setr(aspects,get(%#/_sheet`aspects)),%0,|)),`)),There is no note to erase.,You erase the note for your aspect %0.[setq(y,1)])];@assert %qy;think [attrib_set(%#/_sheet`aspects,[replace(%q<aspects>,%0,[first(%q0,`)]`,|)])]
&CMD`ASPECTS`NOTE_ARG Chargen Object=$+aspects/note *=*:@pemit %#=u(ansi) [switch(0,[@@(Is it an integer greater than zero?)]cand(isint(%0),gt(%0,0)),Aspect number must be a whole number greater than zero.,[@@(Is it within their aspect limits? Sets max aspects into %qm.)]lte(%0,setr(m,get(%#/_sheet`aspects`data`max))),You can only have %qm aspect[switch(%qm,1,,s)].,[@@(Have they provided a note, or do they have the aspect note set? Sets full aspect list into %q<aspects> and target aspect into %q0.)]or(strlen(%1),strlen(last(setr(0,elements(setr(aspects,get(%#/_sheet`aspects)),%0,|)),`))),There is no note to erase.,[@@(Have they provided a name?)]strlen(%1),You erase your aspect %0's note.[setq(y,1)][@@(Do they avoid illegal ` and | characters?)]not(lmath(or,iter(` |,strmatch(%1,*%i0*)))),You may not use backquote (`) or pipe (|) characters in aspect notes.,,You write your aspect %0's note:%r%r%1[setq(y,1)])];@assert %qy;think [attrib_set(%#/_sheet`aspects,[replace(%q<aspects>[@@(Use repeat() in case the aspect list is not actually full.)][repeat(|`,sub(%qm,words(%q<aspects>,|)))],%0,[replace(%q0,2,%1,`)],|)])]
&CMD`ASPECTS`WIPE Chargen Object=$+aspects/wipe:@pemit %#=u(ansi) You wipe all your aspects.[attrib_set(%#/_sheet`aspects)]
&CMD`EDIT Chargen Object=$+edit:@pemit %#=u(ansi) Your sheet's rules, based on [moniker(parent(%#))] ([parent(%#)]):%r%r[u(fun`ruleset`show,%#)]
&CMD`EDIT/CLEAR Chargen Object=$+edit/clear */*:@pemit %#=u(ansi) [switch(0,[@@(Valid section? Sets into %q1.)]complete(iter(lattrp(%!/data`extras`attributes`*),capstr(lcstr(last(%i0,`)))),%0,sheet section,1),Error: %qe,[@@(Valid attribute? Sets into %q2.)]complete(v(data`extras`attributes`%q1),first(%1,=),%q1 attribute,2),Error: %qe,[@@(If Track, valid stress track given after a =? Sets into %q3.)]cor(not(match(%q1,Track)),if(not(strmatch(%1,*=*)),0[setq(e,{For Track attributes, you must name the stress track after an =.})],complete(iter(get(%0/_sheet`stress`data`tracks),first(%i0,`),|,|),rest(%1,=),stress track,3,|))),Error: %qe,[@@(If Initiative/Bonus or Initiative/Speed, valid init given after a =? Sets into %q3.)]cor(not(and(match(Initiative,%q1),match(Bonus Speed,%q2))),if(not(strmatch(%1,*=*)),0[setq(e,{For Initiative/%q2, you must name the conflict type after a =.})],complete(iter(get(%0/_sheet`init`data`conflicts),first(%i0,`),|,|),rest(%1,=),conflict type,3,|))),Error: %qe,You clear [name(%#)]'s %q1/%q2[switch(%q3,@@(null string),@@(do nothing),=%$0)].[attrib_set(%#/_sheet`[switch(%q1,Track,stress`[edit(%q3,%b,_)]`%q2,Initiative,Init`Data`[switch(%q2,Bonus,[edit(%q3,%b,_)]`%q2,Speed,[edit(%q3,%b,_)]`%q2,%q2)],%q1`data`%q2)],)])]
&CMD`EDIT/DEFAULT Chargen Object=$+edit/default */*:@pemit %#=u(ansi) [switch(0,[@@(Valid section? Sets into %q1.)]complete(iter(lattrp(%!/data`extras`attributes`*),capstr(lcstr(last(%i0,`)))),%0,sheet section,1),Error: %qe,[@@(Valid attribute? Sets into %q2.)]complete(v(data`extras`attributes`%q1),first(%1,=),%q1 attribute,2),Error: %qe,[@@(If Track, valid stress track given after a =? Sets into %q3.)]cor(not(match(%q1,Track)),if(not(strmatch(%1,*=*)),0[setq(e,{For Track attributes, you must name the stress track after an =.})],complete(iter(get(%0/_sheet`stress`data`tracks),first(%i0,`),|,|),rest(%1,=),stress track,3,|))),Error: %qe,[@@(If Initiative/Bonus or Initiative/Speed, valid init given after a =? Sets into %q3.)]cor(not(and(match(Initiative,%q1),match(Bonus Speed,%q2))),if(not(strmatch(%1,*=*)),0[setq(e,{For Initiative/%q2, you must name the conflict type after a =.})],complete(iter(get(%0/_sheet`init`data`conflicts),first(%i0,`),|,|),rest(%1,=),conflict type,3,|))),Error: %qe,You return [name(%#)]'s %q1/%q2[switch(%q3,@@(null string),@@(do nothing),=%$0)] to the ruleset default.[attrib_set(%#/_sheet`[switch(%q1,Track,stress`[edit(%q3,%b,_)]`%q2,Initiative,Init`Data`[switch(%q2,Bonus,[edit(%q3,%b,_)]`%q2,Speed,[edit(%q3,%b,_)]`%q2,%q2)],%q1`data`%q2)])])]
&CMD`EDIT/SET Chargen Object=$+edit/set */*=*:@pemit %#=u(ansi) [switch(0,[@@(Valid section? Sets into %q1.)]complete(iter(lattrp(%!/data`extras`attributes`*),capstr(lcstr(last(%i0,`)))),%0,sheet section,1),Error: %qe,[@@(Valid attribute? Sets into %q2.)]complete(v(data`extras`attributes`%q1),%1,%q1 attribute,2),Error: %qe,[@@(Test for correct value. Gives player as %0 and target-value as %1.)][setq(e,No test exists for %q1/%q2.)]udefault(%!/fun`set`%q1`%q2,0,%#,%2),Error: %qe,%qe)]
&CMD`EXTRAS Chargen Object=
&CMD`EXTRAS`EDIT Chargen Object=$+extras/edit/* */*=*:@pemit %#=u(ansi) [switch(0,[@@(Valid edit type? Sets into %q0.)]complete(Add Replace Set,%0,edit type,0),%qe,[@@(Valid sheet section? Sets into %q1.)]complete(iter(lattrp(%!/data`extras`attributes`*),capstr(lcstr(ldelete(%i0,1 2 3,`)))),%1,sheet section,1),%qe,[@@(Valid attribute? Sets into %q2.)]complete(sort(v(data`extras`attributes`%q1)),%2,%q1 attribute,2),%qe,[@@(Valid value? Tests based on data`extras`test`<section>`<attribute>, which takes player as %0, edit type as %1, original value (if possible) as %2, and new value as %3.)]u(data`extras`test`%q1`%q2,%#,%q0,get(%#/_sheet`%q1`data`%q2),%3),%qe,Success: %qe)]
&CMD`EXTRAS/ADD Chargen Object=$+extras/add *:@pemit %#=u(ansi) [switch(0,[@@(Provided a name?)]strlen(setr(0,first(%0,=))),You must provide a name.,[@@(Avoided reserved characters?)]lmath(and,iter(` |,not(strmatch(%0,*%i0*)))),You may not use ` or | in extra names or notes.,{You add a new extra to your sheet, named "[setr(0,first(%0,=))]"[switch(setr(1,rest(%0,=)),@@(null string),.,{, with note "%q1"})][attrib_set(%#/_sheet`extras`extras,[insert(get(%#/_sheet`extras`extras),-1,%q0`%q1,|)])]})]
&CMD`EXTRAS/ADJUST Chargen Object=$+extras/adjust *=*:@pemit %#=u(ansi) [switch(0,[@@(Valid adjustment? Sets into %q0.)]complete(Refresh Skills Stunts,%0,adjustment,0),%qe,[@@(Is %1 an int?)]isint(%1),Adjustment amount must be a whole number.,[@@(%1 != 0?)]neq(0,%1),There's no point in adjusting your %q0 by 0 points.,{You adjust your %q0 by %1 point[switch(%1,1,,s)], for a total adjustment of [setr(1,add(%1,default(%#/_sheet`extras`%q0,0)))] %q0 point[switch(%q1,1,,s)].[attrib_set(%#/_sheet`extras`%q0,%q1)]})]
&CMD`EXTRAS/DEL Chargen Object=$+extras/del *:@pemit %#=u(ansi) [switch(0,[@@(%0 is valid int?)]cand(isint(%0),gt(%0,0)),Extra number must be a whole number greater than zero.,[@@(Do they have that many? Sets extras into %qa and number of extras into %qw.)]lte(%0,setr(w,words(setr(a,get(%#/_sheet`extras`extras)),|))),You only have %qw extra[switch(%qw,1,,s)].,{You delete your [ordinal(%0)] extra, "[first(elements(%qa,%0,|),`)]".[attrib_set(%#/_sheet`extras`extras,[ldelete(%qa,%0,|)])]})]
&CMD`EXTRAS/NAME Chargen Object=$+extras/name *=*:@pemit %#=u(ansi) [switch(0,[@@(%0 is valid int?)]cand(isint(%0),gt(%0,0)),Extra number must be a whole number greater than zero.,[@@(Do they have that many? Sets extras into %qa and number of extras into %qw.)]lte(%0,setr(w,words(setr(a,get(%#/_sheet`extras`extras)),|))),You only have %qw extra[switch(%qw,1,,s)].,[@@(Have they given a name?)]strlen(%1),You must provide a new name.,[@@(Avoided reserved characters?)]lmath(and,iter(` |,not(strmatch(%1,*%i0*)))),You may not use ` or | in extra names.,{You rename your [ordinal(%0)] extra, "[first(setr(e,elements(%qa,%0,|)),`)]", to "%1".[attrib_set(%#/_sheet`extras`extras,[replace(%qa,%0,replace(%qe,1,%1,`),|)])]})]
&CMD`EXTRAS/NOTE Chargen Object=$+extras/note *:@pemit %#=u(ansi) [switch(0,[@@(Extra num is valid int? Sets into %q0.)]cand(isint(setr(0,first(%0,=))),gt(%q0,0)),Extra number must be a whole number greater than zero.,[@@(Do they have that many? Sets extras into %qa and number of extras into %qw.)]lte(%q0,setr(w,words(setr(a,get(%#/_sheet`extras`extras)),|))),You only have %qw extra[switch(%qw,1,,s)].,[@@(Have they given a new note? Sets into %q1.)]strlen(setr(1,rest(%0,=))),[@@(No note given. Erase.)]{You erase the note for your [ordinal(%q0)] extra, "[first(setr(e,elements(%qa,%q0,|)),`)]".[attrib_set(%#/_sheet`extras`extras,[replace(%qa,%q0,[first(%qe,`)]`,|)])]},[@@(Avoided reserved characters?)]lmath(and,iter(` |,not(strmatch(%q1,*%i0*)))),You may not use ` or | in extra notes.,{You set the note for your [ordinal(%q0)] extra, "[first(setr(e,elements(%qa,%q0,|)),`)]", to "%q1"[attrib_set(%#/_sheet`extras`extras,[replace(%qa,%q0,replace(%qe,2,%q1,`),|)])]})]
&CMD`EXTRAS/REORDER Chargen Object=$+extras/reorder *=*:@pemit %#=u(ansi) [switch(0,[@@(%0 is valid int?)]cand(isint(%0),gt(%0,0)),Extra number must be a whole number greater than zero.,[@@(Do they have that many? Sets extras into %qa and number of extras into %qw.)]lte(%0,setr(w,words(setr(a,get(%#/_sheet`extras`extras)),|))),You only have %qw extra[switch(%qw,1,,s)].,[@@(%1 is valid int?)]cand(isint(%1),gt(%1,0)),New position must be a whole number greater than zero.,[@@(Do they have that many?)]lte(%1,%qw),You only have %qw extra[switch(%qw,1,,s)].,{You move your [ordinal(%0)] extra, "[first(setr(e,elements(%qa,%0,|)),`)]", to the [ordinal(%1)] position.}[attrib_set(%#/_sheet`extras`extras,[insert(ldelete(%qa,%0,|),switch(%1,%qw,-1),%qe,|)])])]
&CMD`STRESS Chargen Object=
&CMD`STRESS`UPDATE_OTHER Chargen Object=$+stress/update *:@switch 0=t(setr(0,switch(%0,me,%#,pmatch(%0)))),@pemit %#=u(ansi) '%0' is not a player.,{@pemit %#=u(ansi) You update [switch(moniker(%q0),*s,%$0',%$0's)] stress tracks.;@trigger %!/do`stress`update=%#,%q0}
&CMD`STRESS`UPDATE_OWN Chargen Object=$+stress/update:@pemit %#=u(ansi) You update your stress tracks.;@trigger %!/do`stress`update=%#,%#
&CMD`STUNTS Chargen Object=$+stunts:@pemit %#=u(v(db_sheet)/fun`sheet`stunts,%#)
&CMD`STUNTS`BUY Chargen Object=$+stunts/buy *=*:@break strmatch(%1,*=*);@pemit %#=u(ansi) [switch(0,[@@(Does %0 match a stunt list? Sets it into %q0 and the spaces-stripped one to %q1.)]complete(iter(lattr(%!/data`stunts`lists`*),iter(last(%i0,`),capstr(lcstr(%i0)),_),,|),%0,stunt list,0,|)[setq(1,edit(%q0,%b,_))],%qe,[@@(Is %1 an integer >0?)]cand(isint(%1),gt(%1,0)),Stunt number must be a whole number greater than zero.,[@@(Is %1 within the list? Sets list into %q<all>.)]lte(%1,words(setr(all,v(data`stunts`lists`%q1)),|)),The %q0 list only has [words(%q<all>,|)] stunt[switch(words(%q<all>,|),1,,s)].,[@@(Can they afford it? Sets cost result into %q<calc>, stunt into %q<stunt>, and stunt slot cost into %q<cost>.)]gt(add(get(%#/_sheet`refresh),first(setr(calc,u(v(db_sheet)/fun`stunts`calc,%#,add(u(v(db_sheet)/fun`stunts`total,%#),setr(cost,elements(setr(stunt,elements(%q<all>,%1,|)),3,~))))))),0),You don't have enough refresh left to buy %q<cost> stunt[switch(%q<cost>,1,,s)].,Attempting to buy %q0 stunt %1[chr(44)] [elements(%q<stunt>,2,~)].[setq(y,1)])];@assert %qy;think attrib_set(%!/temp_%#,[v(fun`stunts`test1)][switch(elements(%q<stunt>,5,~),:*,v(data`stunts`[delete(%$0,0,1)]),%$0)][v(fun`stunts`test2)])[setq(y,0)];@pemit %#=[u(temp_%#,%2)]
&CMD`STUNTS`BUY_ARG Chargen Object=$+stunts/buy *=*=*:@pemit %#=u(ansi) [switch(0,[@@(Does %0 match a stunt list? Sets it into %q0 and the spaces-stripped one to %q1.)]complete(iter(lattr(%!/data`stunts`lists`*),iter(last(%i0,`),capstr(lcstr(%i0)),_),,|),%0,stunt list,0,|)[setq(1,edit(%q0,%b,_))],%qe,[@@(Is %1 an integer >0?)]cand(isint(%1),gt(%1,0)),Stunt number must be a whole number greater than zero.,[@@(Is %1 within the list? Sets list into %q<all>.)]lte(%1,words(setr(all,v(data`stunts`lists`%q1)),|)),The %q0 list only has [words(%q<all>,|)] stunt[switch(words(%q<all>,|),1,,s)].,[@@(Can they afford it? Sets cost result into %q<calc>, stunt into %q<stunt>, and stunt slot cost into %q<cost>.)]gt(add(get(%#/_sheet`refresh),first(setr(calc,u(v(db_sheet)/fun`stunts`calc,%#,add(u(v(db_sheet)/fun`stunts`total,%#),setr(cost,elements(setr(stunt,elements(%q<all>,%1,|)),3,~))))))),0),You don't have enough refresh left to buy %q<cost> stunt[switch(%q<cost>,1,,s)].,Attempting to buy %q0 stunt %1[chr(44)] [elements(%q<stunt>,2,~)].[setq(y,1)])];@assert %qy;think attrib_set(%!/temp_%#,[v(fun`stunts`test1)][switch(elements(%q<stunt>,5,~),:*,v(data`stunts`[delete(%$0,0,1)]),%$0)][v(fun`stunts`test2)])[setq(y,0)];@pemit %#=[u(temp_%#,%2)]
&CMD`STUNTS`CREATE Chargen Object=$+stunts/create *=*:@pemit %#=u(ansi) [switch(0,[@@(Have they provided a name?)]strlen(%0),You must provide a stunt name.,[@@(Does the name withhold illegal characters?)]not(lmath(or,iter(~ |,strmatch(%0,*%i0*)))),You may not have tildes (~) or pipes (|) in stunt names.,[@@(Is %1 an integer?)]isint(%1),Stunt cost must be an integer.,[@@(Can they afford it? Sets cost result into %q<cost>.)]gt(add(get(%#/_sheet`refresh),first(setr(cost,u(v(db_sheet)/fun`stunts`calc,%#,add(u(v(db_sheet)/fun`stunts`total,%#),%1))))),0),You don't have enough refresh left to buy %1 stunt[switch(%1,1,,s)].,[attrib_set(%#/_sheet`stunts`stunts,[insert(get(%#/_sheet`stunts`stunts),-1,[@@(no codename)]~[@@(showname)]%0~[@@(cost)]%1~[@@(no note)]~[@@(no delcommands)],|)])]You create the stunt "%0" [switch(%1,<0,and allocate a cost of [switch(abs(%1),1,%$0 stunt,%$0 stunts)],with a refund of %1 stunt[switch(%1,1,,s)])]. You now have [add(get(%#/_sheet`refresh),first(%q<cost>))] refresh and [switch(last(%q<cost>),0,no free stunts,1,1 free stunt,%$0 free stunts)] remaining.)]
&CMD`STUNTS`DEL Chargen Object=$+stunts/del *:@pemit %#=u(ansi) [switch(0,[@@(Is %0 an integer > 0?)]cand(isint(%0),gt(%0,0)),Stunt number must be a whole number greater than zero.,[@@(Do they have that many stunts? Sets full stunt list into %q<all>, and number of stunts into %qw.)]lte(%0,setr(w,words(setr(all,get(%#/_sheet`stunts`stunts)),|))),You only have %qw stunt[switch(%qw,1,,s)].,[@@(Can they afford that? Sets calc result into %q<calc>, that stunt into %q<stunt>, and that stunt's cost into %q<cost>.)]gt(add(get(%#/_sheet`refresh),first(setr(calc,u(v(db_sheet)/fun`stunts`calc,%#,sub(u(v(db_sheet)/fun`stunts`total,%#),setr(cost,elements(setr(stunt,elements(%q<all>,%0,|)),3,~))))))),0),You can't afford to delete "[elements(%q<stunt>,2,~)]" and lose its refund.,You delete your stunt %0[chr(44)] "[elements(%q<stunt>,2,~)]"[chr(44)] for a [switch(%q<cost>,<0,refund,cost)] of [abs(%q<cost>)] stunt slot[switch(abs(%q<cost>),1,,s)]. You now have [add(get(%#/_sheet`refresh),first(%q<calc>))] refresh and [switch(last(%q<calc>),0,no free stunts,1,1 free stunt,%$0 free stunts)] remaining.[@@(If there is on-del code, run it.)][switch(elements(%q<stunt>,5,~),[@@(null string)],[@@(do nothing)],[attrib_set(%!/temp_%#,[switch(%$0,:*,get(%#/_sheet`stunts`del`[delete(%$0,0,1)]),%$0)])]%r[u(ansi)] [u(temp_%#)][attrib_set(%!/temp_%#)][attrib_set(%#/_sheet`stunts`del`[delete(%$0,0,1)])])][@@(Actually change the stunt list.)][attrib_set(%#/_sheet`stunts`stunts,[ldelete(%q<all>,%0,|)])])]
&CMD`STUNTS`NOTE Chargen Object=$+stunts/note *:@pemit %#=u(ansi) [switch(0,[@@(Is the stunt number valid? Sets stunt number into %q0.)]cand(isint(setr(0,first(%0,=))),gt(%q0,0)),Stunt number must be an integer greater than zero.,[@@(Is the stunt within their list? Sets their full stunt list into %qa and number of stunts to %qw.)]lte(%q0,setr(w,words(setr(a,get(%#/_sheet`stunts`stunts)),|))),You only have %qw stunt[switch(%qw,1,,s)].,[@@(Do they provide a comment?)]strmatch(%0,*=*),You clear the note from your stunt %q0.[attrib_set(%#/_sheet`stunts`stunts,[replace(%qa,%0,replace(elements(%qa,%0,|),4,,~),|)])],[@@(Does the note withhold illegal characters?)]not(lmath(or,iter(~ |,strmatch(rest(%0,=),*%i0*)))),You may note have tildes (~) or pipes (|) in stunt notes.,You add a note to your stunt %q0[chr(44)] reading "[setr(1,rest(%0,=))]"[attrib_set(%#/_sheet`stunts`stunts,[replace(%qa,%0,replace(elements(%qa,%0,|),4,%q1,~),|)])])]
&CMD`STUNTS_ARG Chargen Object=$+stunts *:@pemit %#=u(ansi) [switch(0,[@@(Does %0 match a stunt list? Sets it into %q0 and the spaces-stripped one to %q1.)]complete(iter(lattr(%!/data`stunts`lists`*),iter(last(%i0,`),capstr(lcstr(%i0)),_),,|),%0,stunt list,0,|)[setq(1,edit(%q0,%b,_))],%qe,Stunts in list %q0:%r%r[iter(v(data`stunts`lists`%q1),inum(0). [elements(%i0,2,~)] ([elements(%i0,3,~)])[switch(elements(%i0,4,~),[@@(null string)],[@@(Do nothing)],%r%t%$0)],|,%r)]
&CMD`STUNTS/COST Chargen Object=$+stunts/cost *=*:@pemit %#=u(ansi) [switch(0,[@@(Is %0 an integer > 0?)]cand(isint(%0),gt(%0,0)),Stunt number must be a whole number greater than zero.,[@@(Do they have that many stunts? Sets full stunt list into %q<all>, and number of stunts into %qw.)]lte(%0,setr(w,words(setr(all,get(%#/_sheet`stunts`stunts)),|))),You only have %qw stunt[switch(%qw,1,,s)].,[@@(Is cost an integer?)]isint(%1),Stunt cost must be a whole number.,[@@(Can they afford it? Sets original stunt into %q<stunt> and original cost into %q<cost>.)]gt(add(get(%#/_sheet`refresh),first(setr(calc,u(v(db_sheet)/fun`stunts`calc,%#,add(sub(u(v(db_sheet)/fun`stunts`total,%#),setr(cost,elements(setr(stunt,elements(%q<all>,%0,|)),3,~))),%1))))),0),You can't afford that many stunt slots.,You change stunt %0[chr(44)] "[elements(%q<stunt>,2,~)]"[chr(44)] to a [switch(%1,<0,cost,refund)] of [abs(%1)] stunt slot[switch(abs(%1),1,,s)]. You now have [add(get(%#/_sheet`refresh),first(%q<calc>))] refresh and [switch(last(%q<calc>),0,no free stunts,1,1 free stunt,%$0 free stunts)] left.[attrib_set(%#/_sheet`stunts`stunts,[replace(%q<all>,%0,replace(%q<stunt>,3,%1,~),|)])])]
&CMD`STUNTS/LIST Chargen Object=$+stunts/list:@pemit %#=u(ansi) Stunt categories:%r%r[iter(lattr(%!/data`stunts`lists`*),iter(last(%i0,`),capstr(lcstr(%i0)),_),,%r)]
&CMD`STUNTS/LIST_ARG Chargen Object=$+stunts/list *:@pemit %#=u(ansi) [switch(0,[@@(Does %0 match a stunt list? Sets it into %q0 and the spaces-stripped one to %q1.)]complete(iter(lattr(%!/data`stunts`lists`*),iter(last(%i0,`),capstr(lcstr(%i0)),_),,|),%0,stunt list,0,|)[setq(1,edit(%q0,%b,_))],%qe,Stunts in list %q0:%r%r[iter(v(data`stunts`lists`%q1),inum(0). [elements(%i0,2,~)] ([elements(%i0,3,~)])[switch(elements(%i0,4,~),[@@(null string)],[@@(Do nothing)],%r%t%$0)],|,%r)]
&CMD`STUNTS/RENAME Chargen Object=$+stunts/rename *=*:@pemit %#=u(ansi) [switch(0,[@@(Is %0 an integer > 0?)]cand(isint(%0),gt(%0,0)),Stunt number must be a whole number greater than zero.,[@@(Do they have that many stunts? Sets full stunt list into %q<all>, and number of stunts into %qw.)]lte(%0,setr(w,words(setr(all,get(%#/_sheet`stunts`stunts)),|))),You only have %qw stunt[switch(%qw,1,,s)].,[@@(Have they provided a name?)]strlen(%1),You must provide a name.,[@@(Does the name withhold illegal characters?)]not(lmath(or,iter(~ |,strmatch(%1,*%i0*)))),You may not have tildes (~) or pipes (|) in stunt names.,You rename stunt %0 to "%1".[attrib_set(%#/_sheet`stunts`stunts,[replace(%q<all>,%0,replace(elements(%q<all>,%0,|),2,%1,~),|)])])]
&CMD_SKILLS Chargen Object=$+skills:@pemit %#=u(v(db_sheet)/fun`sheet`skills,%#)
&CMD_SKILLS/SET_COLUMN Chargen Object=$+skills/set *=*:@assert get(%#/_sheet`skills`data`columns);@pemit %#=switch(0,[@@(Does %0 match a skill? Sets grabbed skill into %q0.)]complete(get(%#/_sheet`skills`data`list),%0,skill,0,|),%qe,[@@(Is %1 an integer >= 0?)]cand(isint(%1),gte(%1,0)),Skills cannot be rated below [ladder(0)].,[@@(Is %1 within the cap? Sets skill cap into %q<cap>.)]cor([@@(Is the character cap-free?)]lte(setr(cap,get(%#/_sheet`skills`data`cap)),0),[@@(Is %1 <= %q<cap>?)]lte(%1,%q<cap>)),You can't have skills rated above [ladder(%q<cap>)].,[@@(Is %1 different from the current rating for %q0? Sets current rating into %qa.)]neq(%1,setr(a,u(v(db_sheet)/fun`skill`rating,%#,%q0))),Your %q0 is already [ladder(%1)].,[@@(Do they have an empty slot at that rating? i.e. is the number of skills at that rating less than the number of slots?)]or(lt(%1,1),lt([@@(Number of skills.)]max(0,words(graball(setr(skills,get(%#/_sheet`skills`skills)),*`%1,|),|)),[@@(Number of slots.)]last(grab(get(%#/_sheet`skills`slots),%1`*,|),`))),You don't have an empty slot at [ladder(%1)].,[@@(Is %q0 already on the sheet?)]neq(0,%qa),You add %q0 to your sheet[chr(44)] at [ladder(%1)].[attrib_set(%#/_sheet`skills`skills,[switch(%q<skills>,,[@@(It's an empty string. This skill is all that goes in there.)]%q0`%1,[@@(It's not empty. Insert and sort as normal.)]sort(insert(%$0,-1,%q0`%1,|),a,|))])],[@@(Is %1 greater than zero?)]gt(%1,0),You remove %q0 from your sheet[chr(44)] setting it to [ladder(0)].[switch(words(setr(all,%q<skills>),|),1,[@@(Only one skill to begin with. Wipe the attribute.)]attrib_set(%#/_sheet`skills`skills),[@@(There are multiple. Remove it.)]attrib_set(%#/_sheet`skills`skills,[remove(%q<all>,%q0`%qa,|)]))],You set %q0 to [ladder(%1)].[attrib_set(%#/_sheet`skills`skills,[replace(setr(all,%q<skills>),match(%q<skills>,%q0`%qa,|),%q0`%1,|)])])
&CMD_SKILLS/SET_NOCOLUMN Chargen Object=$+skills/set *=*:@break get(%#/_sheet`skills`data`columns)=@@ The player uses columns and so does not use this version of the command.;@pemit %#=switch(0,[@@(Does %0 match a skill? Sets grabbed skill into %q0.)]complete(get(%#/_sheet`skills`data`list),%0,skill,0,|),%qe,[@@(Is %1 an integer >= 0?)]cand(isint(%1),gte(%1,0)),Skills cannot be rated below [ladder(0)].,[@@(Is %1 within the cap? Sets skill cap into %q<cap>.)]cor([@@(Is the character cap-free?)]lte(setr(cap,get(%#/_sheet`skills`data`cap)),0),[@@(Is %1 <= %q<cap>?)]lte(%1,%q<cap>)),You can't have skills rated above [ladder(%q<cap>)].,[@@(Is %1 different from the current rating for %q0? Sets current rating into %qa.)]neq(%1,setr(a,u(v(db_sheet)/fun`skill`rating,%#,%q0))),Your %q0 is already [ladder(%1)].,[@@(Do they have enough skill points? Sets skill points into %q<points>.)]gte(sub([@@(Total skill points, including refund.)]add(setr(points,u(v(db_sheet)/fun`skill`points`nocolumn,%#)),%q1),[@@(Subtract the cost of the new rating.)]%1),0),You only have %q<points> skill point[switch(%q<points>,1,,s)].,[@@(Is %q0 already on the sheet?)]neq(0,%qa),You add %q0 to your sheet[chr(44)] at [ladder(%1)].[attrib_set(%#/_sheet`skills`skills,[switch(get(%#/_sheet`skills`skills),,[@@(It's an empty string. This skill is all that goes in there.)]%q0`%1,[@@(It's not empty. Insert and sort as normal.)]sort(insert(%$0,-1,%q0`%1,|),a,|))])],[@@(Is %1 greater than zero?)]gt(%1,0),You remove %q0 from your sheet[chr(44)] setting it to [ladder(0)].[switch(words(setr(all,get(%#/_sheet`skills`skills)),|),1,[@@(Only one skill to begin with. Wipe the attribute.)]attrib_set(%#/_sheet`skills`skills),[@@(There are multiple. Remove it.)]attrib_set(%#/_sheet`skills`skills,[remove(%q<all>,%q0`%qa,|)]))],You set %q0 to [ladder(%1)].[attrib_set(%#/_sheet`skills`skills,[replace(setr(all,get(%#/_sheet`skills`skills)),match(%q<skills>,%q0`%qa,|),%q0`%1,|)])])
&CMD_SKILLS/SHIFT Chargen Object=$+skills/shift *=*:@assert get(%#/_sheet`skills`data`columns)=@pemit %#=You don't use columns, so you don't have to use +skills/shift.;@pemit %#=switch(0,[@@(Does %0 match a skill? Sets grabbed skill into %q0.)]complete(get(%#/_sheet`skills`data`list),%0,skill,0,|),%qe,[@@(Is %1 an integer?)]isint(%1),Skill rating must be a whole number.,[@@(Is %1 >= 0?)]gte(%1,0),You can't set skills below [ladder(0)].,[@@(Is %1 within the cap? Sets cap into %q<cap>.)]cor([@@(Capless?)]lte(setr(cap,get(%#/_sheet`skills`data`cap)),0),[@@(Within cap?)]lte(%1,%q<cap>)),You cannot have skills above [ladder(%q<cap>)].,[@@(Is %1 different from the current rating? Sets skills into %q<skills>, and current rating into %qa.)]neq(%1,setr(a,max(0,last(grab(setr(skills,get(%#/_sheet`skills`skills)),%q0`*,|),`)))),%q0 is already rated [ladder(%qa)].,[@@(Does the player have enough skill points?)]gte(u(v(db_sheet)/fun`skill`points`column,%#),sub(%1,%qa)),You don't have enough skill points to move %q0 from [ladder(%qa)] to [ladder(%1)].,[@@(Test if the columns are stable after removing a slot from %qa. Sets slots into %q<slots>. Sets current number of %qa slots into %q<before>.)]or(eq(%qa,0),gte([@@(Slots at %qa, -1)]dec(setr(before,last(grab(setr(slots,get(%#/_sheet`skills`slots)),%qa`*,|),`))),[@@(Slots at %qa+1.)]last(grab(%q<slots>,[inc(%qa)]`*,|),`))),You have too many slots at [ladder(inc(%qa))] to shift a skill away from [ladder(%qa)].,[@@(Is the incremented number of slots at %1 <= the number of slots below %1? Or, is %1 <= 1? Sets current number of %1 slots into %q<after>.)]or(lte(%1,1),lte(inc(setr(after,last(grab(%q<slots>,%1`*,|),`))),last(grab(%q<slots>,[dec(%1)]`*,|),`))),You don't have enough slots at [ladder(dec(%1))] to support a new skill at [ladder(%1)].,[@@(If %q0 is only being upgraded by 1, is the incremented number of slots at %1 still <= the decremented number of slots at %1-1? Or, is %1 <= 1?)]cor(lte(%1,1),neq(%1,inc(%qa)),lte(inc(last(grab(%q<slots>,%1`*,|),`)),dec(last(grab(%q<slots>,[dec(%1)]`*,|),`)))),You don't have enough slots at [ladder(dec(%1))] to support a new skill at [ladder(%1)].,[@@(Setting skills.)][attrib_set(%#/_sheet`skills`skills,[setdiff(setr(skills,switch(%q<skills>,,[@@(Null string.)]%q0`%1,sort(insert(%q<skills>,-1,%q0`%1,|),i,|))),%q0`%qa|[graball(%q<skills>,*`0,|)],|,i)])][@@(Setting slots.)][attrib_set(%#/_sheet`skills`slots,[setdiff(setr(slots,switch(%q<slots>,,[@@(Null string.)]%1`1,insert(%q<slots>,-1,%qa`[dec(%q<before>)]|%1`[inc(%q<after>)],|))),%qa`%q<before>|%1`%q<after>|[graball(%q<slots>,0`*,|)]|[graball(%q<slots>,*`0,|)],|,i)])]You shift %q0 from [ladder(%qa)] to [ladder(%1)] for a [switch(%qa,>%1,refund,cost)] of [setr(2,abs(sub(%qa,%1)))] skill point[switch(%q2,1,,s)]. You have [setr(p,u(v(db_sheet)/fun`skill`points`column,%#))] skill point[switch(%qp,1,,s)] left.)
&CMD_SKILLS/SLOTS Chargen Object=$+skills/slots *=*:@assert get(%#/_sheet`skills`data`columns)=@pemit %#=You don't use columns, so you don't have to use +skills/slots.;@pemit %#=switch(0,[@@(Is %0 a whole number?)]isint(%0),You must specify the skill rating by its number.,[@@(Is %0 > 0?)]gt(%0,0),You don't need to buy skill slots below [ladder(1)].,[@@(Is %0 within the skill cap? Sets cap into %q<cap>.)]cor(lte(setr(cap,get(%#/_sheet`skills`data`cap)),0),lte(%0,%q<cap>)),You can't currently have skills rated above [ladder(%q<cap>)].,[@@(Is %1 an integer >= 0?)]cand(isint(%1),gte(%1,0)),You must specify the number of skill slots as a whole number[chr(44)] at least zero.,[@@(Do they have enough skill points? Sets their current slots list into %q<slots> and grabbed slot into %qa.)]gte(sub([@@(Current skill points, including refund for current number of slots at that rating.)]add(u(v(db_sheet)/fun`skill`points`column,%#),mul(first(setr(a,grab(setr(slots,get(%#/_sheet`skills`slots)),%0`*,|)),`),last(%qa,`))),[@@(Cost of those slots.)]mul(%0,%1)),0),You don't have enough skill points for that purchase.,[@@(Does the player have few enough skills at %0 to go down to %1?)]lte(words(graball(get(%#/_sheet`skills`skills),*`%0,|),|),%1),You have too many skills at [ladder(%0)] to go down to %1 slot[switch(%1,1,,s)].,[@@(Does the player have few enough slots at %0+1 to go down to %1?)]lte(last(grab(%q<slots>,[inc(%0)]`*,|),`),%1),You have too many slots at [ladder(inc(%0))] to go down to %1 slot[switch(%1,1,,s)].,[@@(Is %0 1, or does the player have enough slots at %0-1 to support %1?)]cor(eq(1,%0),lte(%1,last(grab(%q<slots>,[dec(%0)]`*,|),`))),You don't have enough slots at [ladder(dec(%0))] to support %1 slot[switch(%1,1,,s)] at [ladder(%0)].,[@@(Is %1 > 0?)]gt(%1,0),[@@(Remove.)][attrib_set(%#/_sheet`skills`slots,[ldelete(%q<slots>,match(%q<slots>,%0`*,|),|)])]You now have no slots at [ladder(%0)]. You have [setr(p,u(v(db_sheet)/fun`skill`points`column,%#))] skill point[switch(%qp,1,,s)].,[@@(Do they have any slots at that level yet?)]match(%q<slots>,%0`*,|),[@@(Insert.)][attrib_set(%#/_sheet`skills`slots,[switch(%q<slots>,,[@@(Null string. This is all that needs to be set.)]%0`%1,[@@(Needs to be inserted.)]insert(%q<slots>,-1,%0`%1,|))])]You now have %1 slot[switch(%1,1,,s)] at [ladder(%0)]. You have [setr(p,u(v(db_sheet)/fun`skill`points`column,%#))] skill point[switch(%qp,1,,s)].,[@@(Replace.)][attrib_set(%#/_sheet`skills`slots,[replace(%q<slots>,match(%q<slots>,%0`*,|),%0`%1,|)])]You now have %1 slot[switch(%1,1,,s)] at [ladder(%0)]. You have [setr(p,u(v(db_sheet)/fun`skill`points`column,%#))] skill point[switch(%qp,1,,s)].)
&CMD_SKILLS/SWAP Chargen Object=$+skills/swap *=*:@pemit %#=switch(0,[@@(Does %0 match a skill? Sets grabbed skill into %q0.)]complete(setr(skills,get(%#/_sheet`skills`data`list)),%0,skill,0,|),%qe,[@@(Does %1 match a skill? Sets grabbed skill into %q1.)]complete(%q<skills>,%1,skill,1,|),%qe,[@@(Are the current ratings different? Sets %q0's rating into %qa, and %q1's rating into %qb. Also set the player's _sheet`skills`skills into %q<all>.)]neq(setr(a,u(v(db_sheet)/fun`skill`rating,%#,%q0)),setr(b,u(v(db_sheet)/fun`skill`rating,%#,%q1)))[setq(all,get(%#/_sheet`skills`skills))],Both %q0 and %q1 are rated at [ladder(%qa)]. There is no point in swapping them.,[@@(Is %qa > 0?)]gt(%qa,0),You remove %q1 from your sheet and put %q0 in its place at [ladder(%qb)].[attrib_set(%#/_sheet`skills`skills,[sort(replace(%q<all>,match(%q<all>,%q1`%qb,|),%q0`%qb,|),i,|)])],[@@(Is %qb > 0?)]gt(%qb,0),You remove %q0 from your sheet and put %q0 in its place at [ladder(%qa)].[attrib_set(%#/_sheet`skills`skills,[sort(replace(%q<all>,match(%q<all>,%q0`%qa,|),%q1`%qa,|),i,|)])],You swap the ratings of %q0 (now [ladder(%qb)]) and %q1 (now [ladder(%qa)]).[attrib_set(%#/_sheet`skills`skills,[setdiff(get(%#/_sheet`skills`skills)|%q0`%qb|%q1`%qa,%q0`%qa|%q1`%qb,|,i)])])
&DATA Chargen Object=
&DATA`EXTRAS Chargen Object=
&DATA`EXTRAS`ATTRIBUTES Chargen Object=
&DATA`EXTRAS`ATTRIBUTES`ASPECTS Chargen Object=Max Names
&DATA`EXTRAS`ATTRIBUTES`INITIATIVE Chargen Object=Conflicts Roll Bonus Speed
&DATA`EXTRAS`ATTRIBUTES`REFRESH Chargen Object=Level
&DATA`EXTRAS`ATTRIBUTES`SKILLS Chargen Object=List Cap Points Columns
&DATA`EXTRAS`ATTRIBUTES`STRESS Chargen Object=Tracks Minimum Cons
&DATA`EXTRAS`ATTRIBUTES`STUNTS Chargen Object=Free Stunts-Refresh
&DATA`EXTRAS`ATTRIBUTES`TRACK Chargen Object=Bonus Override Toughness Cons
&DATA`EXTRAS`SKILLS Chargen Object=
&DATA`EXTRAS`SKILLS`LIST Chargen Object=switch(%1,Replace,[setq(a,first(%3,/))][setq(b,rest(%3,/))]switch(0,[@@(Valid skill?)]complete(%2,%qa,skill,a),0,[@@(Given a new name?)]strlen(%qb),0[setq(e,You must provide a new name.)],[@@(No pipe?)]not(strmatch(%qb,*|*)),0[setq(e,You may not use pipes (|) in skill names.)],[@@(Don't already have that skill?)]not(match(%2,%qb)),0[setq(e,You already have a skill named '%qb'.)],1[setq(e,You Replace your skill %qa with %qb.)][attrib_set(%0/_sheet`skills`data`list,[sort(replace(%2,match(%2,%qa,|),%qb,|),i,|)])]),Set,0[setq(e,UNIMPLEMENTED SET)],Add,0[setq(e,UNIMPLEMENTED ADD)])
&DATA`EXTRAS`TEST Chargen Object=
&DATA`EXTRAS`TEST`ASPECTS Chargen Object=
&DATA`EXTRAS`TEST`ASPECTS`MAX Chargen Object=switch(0,not(match(%1,Replace)),0[setq(e,You can't 'Replace' a maximum aspects value.)],isint(%3),0[setq(e,New value must be a whole number.)],gt(switch(%1,Add,add(%2,%3),%3),0),0[setq(e,Maximum aspects' final value must be greater than zero. Without aspects[chr(44)] it's not Fate.)],1[setq(e,switch(%1,Add,You Add %3 to your maximum aspects[chr(44)] for a total of [setr(3,add(%2,%3))].,You Set your maximum aspects to [setr(3,%3)].))])
&DATA`EXTRAS`TEST`ASPECTS`NAMES Chargen Object=switch(%1,Replace,switch(0,[@@(Correct format?)]strmatch(%3,*`*),0[setq(e,The aspect number and title must be separated by a ` (left of the 1 on US keyboards).)],[@@(Valid int?)]cand(isint(first(%3,`)),gt(first(%3,`),0)),0[setq(e,You must specify the named aspect by a whole number greater than zero.)],[@@(Have that many aspects?)]lte(first(%3,`),setr(b,get(%0/_sheet`aspects`data`max))),0[setq(e,You can only have %qb aspect[switch(%qb,1,,s)] so you can't name more.)],[@@(Has text?)]gt(strlen(rest(%3,`)),0),0[setq(e,You must provide a new name for the aspect.)],[@@(No pipes?)]not(strmatch(%3,*|*)),0[setq(e,You can only Replace one named aspect at a time.)],[@@(Valid existing sheet name? Sets number into %qa.)]complete(iter(%2,first(%i0,`),|),first(%3,`),named aspect number,a),0,1[setq(e,{You Replace your [ordinal(first(%3,`))] aspect's name with '[rest(%3,`)]'.[attrib_set(%0/_sheet`aspects`data`names,[replace(%2,match(%2,%qa`*,|),%3,|)])]})]),Add,switch(0,[@@(Correct format for all?)]lmath(and,iter(%3,strmatch(%i0,*`*),|)),0[setq(e,All named aspects must be of the format <number>`<name>.)],[@@(Valid int for all?)]lmath(and,iter(%3,cand(isint(first(%i0,`)),gt(first(%i0,`),0)),|)),0[setq(e,All named aspects must be specified by a whole number greater than zero.)],[@@(That many aspects for all?)][setq(b,get(%0/_sheet`aspects`data`max))]lmath(and,iter(%3,lte(first(%i0,`),%qb),|)),0[setq(e,You can only have %qb aspect[switch(%qb,1,,s)] and so can't name more.)],[@@(No repeats?)]eq(words(setr(3,insert(%2,-1,%3,|)),|),words(setunion(iter(%q3,first(%i0,`),|,|),,|),|)),0[setq(e,You must name each aspect only once.)],1[setq(e,You Add new names to your aspect list.[attrib_set(%0/_sheet`aspects`data`names,%q3)])]),Set,switch(0,[@@(Empty?)]strlen(%3),1[setq(e,You set your aspect names back to the default.)][attrib_set(%0/_sheet`aspects`data`names)],[@@(Correct format for all?)]lmath(and,iter(%3,strmatch(%i0,*`*),|)),0[setq(e,All named aspects must be of the format <number>`<name>.)],[@@(Valid int for all?)]lmath(and,iter(%3,cand(isint(first(%i0,`)),gt(first(%i0,`),0)),|)),0[setq(e,All named aspects must be specified by a whole number greater than zero.)],[@@(That many aspects for all?)][setq(b,get(%0/_sheet`aspects`data`max))]lmath(and,iter(%3,lte(first(%i0,`),%qb),|)),0[setq(e,You can only have %qb aspect[switch(%qb,1,,s)] and so can't name more.)],[@@(No repeats?)]eq(words(%3,|),words(setunion(iter(%3,first(%i0,`),|),))),0[setq(e,You must name each aspect only once.)],1[setq(e,You Set your aspect titles.)][attrib_set(%0/_sheet`aspects`data`names,%3)]))
&DATA`EXTRAS`TEST`SKILLS Chargen Object=
&DATA`EXTRAS`TEST`SKILLS`LIST Chargen Object=switch(%1,Default,1[setq(e,You reset your skill list to the default.)][attrib_set(%0/_sheet`skills`data`list)],Replace,[setq(a,first(%3,/))][setq(b,rest(%3,/))]switch(0,[@@(Valid skill?)]complete(%2,%qa,skill,a,|),0,[@@(Given a new name?)]strlen(%qb),0[setq(e,You must provide a new name.)],[@@(No pipe?)]not(strmatch(%qb,*|*)),0[setq(e,You may not use pipes (|) in skill names.)],[@@(Don't already have that skill?)]not(match(%2,%qb,|)),0[setq(e,You already have a skill named '%qb'.)],1[setq(e,You Replace your skill %qa with %qb.)][attrib_set(%0/_sheet`skills`data`list,[sort(replace(%2,match(%2,%qa,|),%qb,|),i,|)])]),Set,switch(%3,@@(null string),0[setq(e,You must have at least one skill.)],1[setq(e,You set your skill list to: [itemize(setr(3,sort(%3,i,|)),|)])][attrib_set(%0/_sheet`skills`data`list,%q3)]),Add,switch(0,[@@(No repeats.)]eq(words(setr(3,insert(%2,-1,%3,|)),|),words(setunion(%q3,,|),|)),0[setq(e,You can't have multiple skills with the same name.)],1[setq(e,You add [setr(w,words(%3,|))] skill[switch(%qw,1,,s)] to your skill list.)][attrib_set(%0/_sheet`skills`data`list,%q3)]))
&DATA`STUNTS Chargen Object=
&DATA`STUNTS`GO Chargen Object=1,There should be no reason to interrupt this purchase.
&DATA`STUNTS`LISTS Chargen Object=
&DATA`STUNTS`LISTS`BUILD Chargen Object=Initiative Bonus:%q<init>:%q<bonus>~Initiative Bonus~-1~Grants a bonus to initiative. +stunts/buy Build=1=<conflict type>=<num>~[@@(Valid conflict? Sets into %q<init>.)]complete(iter(get(%#/_sheet`init`data`conflicts),first(%i0,`),chr(124),chr(124)),first(%0,=),conflict type,init,chr(124))[setq(init2,edit(%q<init>,%b,_))],%qe,[@@(Valid int? Sets into %q<bonus>.)]isint(setr(bonus,last(%0,=))),Bonus must be a whole number.~You add a %q<bonus> bonus to your %q<init> initiative.[attrib_set(%#/_sheet`init`data`%q<init2>`bonus,[add(get(%#/_sheet`init`data`%q<init2>`bonus),%q<bonus>)])]~You lose your %q<bonus> bonus to %q<init> initiative.\[attrib_set\(\%#/_sheet`init`data`%q<init2>`bonus\,\[sub\(get\(\%#/_sheet`init`data`%q<init2>`bonus\)\,%q<bonus>\)\]\)\]|Initiative Skill Swap:%q<init>:%q<skill>:%q<oldskill>~Initiative Skill Swap~-1~Swaps the skill used for initiative. +stunts/buy Build=2=<conflict type>=<new skill>~[@@(Valid conflict? Sets into %q<init>, sets whole strings into %qa and %qc and old skill into %q<oldskill>.)]complete(iter(setr(a,get(%#/_sheet`init`data`conflicts)),first(%i0,`),chr(124),chr(124)),first(%0,=),conflict type,init,chr(124))[setq(c,grab(%qa,%q<init>*,chr(124)))][setq(oldskill,elements(%qc,2,`))],%qe,[@@(Valid skill? Sets into %q<skill>.)]complete(get(%#/_sheet`skills`data`list),last(%0,=),skill,skill,chr(124)),%qe~You now use %q<skill> for %q<init> initiative.[attrib_set(%#/_sheet`init`data`conflicts,[replace(%qa,match(%qa,%qc,chr(124)),replace(%qc,2,%q<skill>,`),chr(124))])]~You now use %q<oldskill> for %q<init> initiative.\[attrib_set\(\%#/_sheet`init`data`conflicts\,\[replace\(setr\(a\,get\(\%#/_sheet`init`data`conflicts\)\)\,setr\(m\,match\(\%qa\,%q<init>*\,chr\(124\)\)\)\,replace\(elements\(\%qa\,\%qm\,chr\(124\)\)\,2\,%q<oldskill>\,`\)\,chr\(124\)\)\]\)\]|Stress Skill Swap:%q<stress>:%q<skill>:%q<oldskill>~Stress Skill Swap~-1~Swaps the skill used to determine stress capacity. +stunts/buy Build=3=<stress>=<new skill>~[@@(Valid stress track? Sets the whole list into %qa, the whole word into %qs, the old skill into %q<oldskill>, and the particular stress track into %q<stress>.)]complete(iter(setr(a,get(%#/_sheet`stress`data`tracks)),first(%i0,`),chr(124),chr(124)),first(%0,=),track,stress,chr(124))[setq(s,grab(%qa,%q<stress>*,chr(124)))][setq(oldskill,elements(%qs,2,`))],%qe,[@@(Does that track have a determining skill?)]strlen(%q<oldskill>),Your %q<stress> track does not use a skill to determine its capacity.,[@@(Valid skill? Sets into %q<skill>.)]complete(get(%#/_sheet`skills`data`list),last(%0,=),skill,skill,chr(124)),%qe~You now use %q<skill> to determine your %q<stress> capacity.[attrib_set(%#/_sheet`stress`data`tracks,[replace(%qa,match(%qa,%qs,chr(124)),replace(%qs,2,%q<skill>,`),chr(124))])]~You now use %q<oldskill> to determine your %q<stress> capacity.\[attrib_set\(\%#/_sheet`stress`data`tracks\,\[replace\(setr\(a\,get\(\%#/_sheet`stress`data`tracks\)\)\,setr\(m\,match\(\%qa\,%q<stress>*\,chr\(124\)\)\)\,replace\(elements\(\%qa\,\%qm\,chr\(124\)\)\,2\,%q<oldskill>\,`\)\,chr\(124\)\)\]\)\]|Mild Consequences:%q<stress>:%q<bonus>~Bonus Mild Consequences~-1~Grants bonus mild consequences for a certain stress track. +stunts/buy Build=4=<stress>=<num>~[@@(Valid track? Sets it into %q<stress>, and the spaces-stripped-out version into %q<stress2>.)]complete(iter(get(%#/_sheet`stress`data`tracks),first(%i0,`),chr(124),chr(124)),first(%0,=),track,stress,chr(124))[setq(stress2,edit(%q<stress>,%b,_))],%qe,[@@(Valid int? Sets it into %q<bonus>.)]isint(setr(bonus,last(%0,=))),Bonus number must be a whole number.~You gain %q<bonus> bonus mild %q<stress> consequences.[attrib_set(%#/_sheet`stress`%q<stress2>`cons,[add(get(%#/_sheet`stress`%q<stress2>`cons),%q<bonus>)])]~You lose %q<bonus> bonus mild %q<stress> consequences.\[attrib_set\(\%#/_sheet`stress`%q<stress2>`cons\,\[sub\(get\(\%#/_sheet`stress`%q<stress2>`cons\)\,%q<bonus>\)\]\)\]
&DO Chargen Object=
&DO`STRESS Chargen Object=
&DO`STRESS`UPDATE Chargen Object=@@ Action list for re-setting character stress. Takes enactor %0 and target %1.;@@ Nuke existing stress.;@wipe %1/_sheet`stress`tracks`**;@@ Dolist for all existing stress tracks.;@dolist/delimit | [get(%1/_sheet`stress`data`tracks)]={@@ Set stress boxes.;&_sheet`stress`tracks`[setr(0,edit(first(%i0,`),%b,_))] %1=[delete(repeat(%bO,u(fun`stress`boxes,%1,%q0)),0,1)];@@ Set extra consequence slots, if necessary.;@switch u(fun`stress`cons,%1,%q0)=>0,{@dol [lnum(1,%$0)]=&_sheet`stress`tracks`%q0`Mild`%i0 %1=};@@ Set toughness, if necessary.;@switch u(%1/_sheet`stress`%q0`toughness)=>0,&_sheet`stress`tracks`%q0`toughness %1=[delete(repeat(%bO,%$0),0,1)]}
&FUN Chargen Object=
&FUN`RULESET Chargen Object=[iter(aspects`data`max aspects`data`names skills`data`list skills`data`cap skills`data`points skills`data`columns stress`data`tracks stress`data`minimum stress`data`cons stunts`data`free stunts`data`stunts-refresh refresh init`data`conflicts init`data`roll,ulocal(fun`ruleset`att,%0,%i0),,%r%r)]
&FUN`RULESET`ASPECTS Chargen Object=
&FUN`RULESET`ASPECTS`DATA Chargen Object=
&FUN`RULESET`ASPECTS`DATA`MAX Chargen Object=Players can have up to [u(ansi,%0)] aspect[switch(%0,1,,s)].
&FUN`RULESET`ASPECTS`DATA`NAMES Chargen Object=switch(%0,@@(null string),Aspects have no special titles.,capstr(itemize(iter(%$0,aspect [first(%i0,`)] has the title '[u(ansi,rest(%i0,`))]',|,|),|,and,;)).)
&FUN`RULESET`ATT Chargen Object=[@@(Takes object %0 and attribute %1. Displays appropriate elaboration using the 'fun`ruleset`<attribute>' attribute.)]%t%1: [get(%0/_sheet`%1)].%r[u(fun`ruleset`%1,get(%0/_sheet`%1))]
&FUN`RULESET`INIT Chargen Object=
&FUN`RULESET`INIT`DATA Chargen Object=
&FUN`RULESET`INIT`DATA`CONFLICTS Chargen Object=Conflict types include [itemize(iter(%0,u(ansi,first(%i0,`)) ([switch(rest(%i0,`),@@(null string),no skills listed,ties broken by [itemize(%$0,`)])]),|,|),|,and,;)].
&FUN`RULESET`INIT`DATA`ROLL Chargen Object=Players [u(ansi,if(%0,modify skills with dice,use skill bonuses))] to determine initiative order.
&FUN`RULESET`REFRESH Chargen Object=Players start with [u(ansi,%0)] refresh.
&FUN`RULESET`SHOW Chargen Object=[@@(Takes ruleset object %0 and shows all the ruleset information, including the +homebrew/set commands.)][iter(Aspects Refresh Skills Stress Stunts Initiative,%t%i0:%r[ulocal(fun`ruleset`show`%i0,%0)],,%r%r)]
&FUN`RULESET`SHOW`ASPECTS Chargen Object=[u(ansi,+edit/set)] Aspects/Max=[u(ansi,setr(0,get(%0/_sheet`aspects`data`max)))]%r%t[name(%0)] may have up to [u(ansi,%q0)] character aspect[switch(%q0,1,,s)].%r[u(ansi,+edit/set)] Aspects/Names=[u(ansi,switch(setr(0,get(%0/_sheet`aspects`data`names)),@@(null string),<blank>,%q0))]%r%t[switch(%$0,@@(blank),No aspects have special titles.,capstr(itemize(iter(%q0,aspect [u(ansi,first(%i0,`))] is titled '[u(ansi,rest(%i0,`))]',|,|),|,and,;)))].
&FUN`RULESET`SHOW`INITIATIVE Chargen Object=[u(ansi,+homebrew/set %0>)]Initiative/Conflicts=[u(ansi,setr(0,get(%0/_sheet`init`data`conflicts)))]%r%t[name(%0)] has initiative for [itemize(iter(%q0,u(ansi,first(%i0,`))[setq(s,insert(%qs,-1,first(%i0,`),|))] ([switch(rest(%i0,`),@@(blank),order not determined by skills,order determined by [itemize(iter(%$0,u(ansi,%i0),`,`),`)])]),|,|),|,and,;)] conflict[switch(words(%q0,|),1,,s)].%r[u(ansi,+homebrew/set %0>)]Initiative/Roll=[u(ansi,setr(0,get(%0/_sheet`init`data`roll)))]%r%t[name(%0)] [u(ansi,switch(%q0,1,DOES,DOES NOT))] add dice to initiative skills.%r%r[iter(Bonus Speed,iter(%qs,[u(ansi,+homebrew/set %0>)]Initiative/%i1=%i0/[u(ansi,switch(setr(0,get(%0/_sheet`init`data`[edit(%i0,%b,_)]`%i1)),@@(null string),<blank>,%q0))]%r%t[switch(%i1,Bonus,{[name(%0)] has a +[u(ansi,switch(%q0,@@(null string),0,%q0))] bonus to %i0 initiative.},Speed,{[name(%0)] has [u(ansi,switch(%q0,@@(null string),normal,<1,normal,1,Inhuman,2,Supernatural,3,Mythic,Level %q0))] %i0 Speed.})],|,%r),,%r%r)]
&FUN`RULESET`SHOW`REFRESH Chargen Object=[u(ansi,+edit/set)] Refresh/Level=[u(ansi,setr(0,get(%0/_sheet`refresh)))]%r%t[name(%0)] starts with [u(ansi,%q0)] refresh.
&FUN`RULESET`SHOW`SKILLS Chargen Object=[u(ansi,+edit/set)] Skills/List=[u(ansi,setr(0,get(%0/_sheet`skills`data`list)))]%r%tThe skill list is [itemize(iter(%q0,u(ansi,%i0),|,|),|)].%r[u(ansi,+edit/set)] Skills/Cap=[u(ansi,setr(0,get(%0/_sheet`skills`data`cap)))]%r%tSkills are [switch(%q0,<1,u(ansi,not capped),capped at [u(ansi,ladder(%q0))])].%r[u(ansi,+edit/set)] Skills/Points=[u(ansi,setr(0,get(%0/_sheet`skills`data`points)))]%r%t[name(%0)] has [u(ansi,%q0)] skill point[switch(%q0,1,,s)].%r[u(ansi,+edit/set)] Skills/Columns=[u(ansi,setr(0,get(%0/_sheet`skills`data`columns)))]%r%tSkills [u(ansi,if(%q0,DO,DO NOT))] obey column rules.
&FUN`RULESET`SHOW`STRESS Chargen Object=[u(ansi,+edit/set)] Stress/Tracks=[u(ansi,setr(0,get(%0/_sheet`stress`data`tracks)))]%r%t[name(%0)] has the stress tracks [itemize(iter(%q0,[u(ansi,setr(i,first(%i0,`))[setq(s,insert(%qs,-1,%qi,|))])] ([switch(rest(%i0,`),@@(null string),not modified,modified by [itemize(iter(%$0,u(ansi,%i0),`,`),`)])]),|,|),|,and,;)].%r[u(ansi,+edit/set)] Stress/Minimum=[u(ansi,setr(0,get(%0/_sheet`stress`data`minimum)))]%r%t[name(%0)]'s stress tracks start at [u(ansi,%q0)] box[switch(%q0,1,,es)].%r[u(ansi,+edit/set)] Stress/Cons=[u(ansi,setr(0,get(%0/_sheet`stress`data`cons)))]%r%t[name(%0)] has the general-use consequences [itemize(iter(%q0,u(ansi,first(%i0,`)) (worth [u(ansi,setr(1,rest(%i0,`)))] shift[switch(%q1,1,,s)]),|,|),|)].%r%r%tTrack:%r[iter(v(data`extras`attributes`track),iter(%qs,[u(ansi,+edit/set)] Track/%i1=%i0/[u(ansi,switch(setr(0,get(%0/_sheet`stress`[edit(%i0,%b,_)]`%i1)),@@(null string),<blank>,%$0))]%r%t[switch(%i1,Bonus,[name(%0)]'s %i0 track has [u(ansi,switch(%q0,@@(null string),no,%q0))] bonus box[switch(%q0,1,,es)].,Override,{[switch(%q0,@@(null string),[name(%0)]'s %i0 track will be calculated normally.,{Regardless of minimums and skill levels, [name(%q0)]'s %i0 track will be [u(ansi,%q0)] box[switch(%q0,1,,es)] long (plus any Bonus).})]},Toughness,{[name(%0)]'s %i0 track has [u(ansi,switch(%q0,@@(null string),no,%$0))] 'Toughness' box[switch(%q0,1,,es)].},Cons,{[name(%0)] has [u(ansi,switch(%q0,@@(null string),no,%$0))] bonus mild %i0 consequence[switch(%q0,1,,s)]},{ERROR})],|,%r),,%r%r)]
&FUN`RULESET`SHOW`STUNTS Chargen Object=[u(ansi,+edit/set)] Stunts/Free=[u(ansi,setr(0,get(%0/_sheet`stunts`data`free)))]%r%t[name(%0)] gets [u(ansi,%q0)] free stunt[switch(%q0,1,,s)].%r[u(ansi,+edit/set)] Stunts/Stunts-Refresh=[u(ansi,setr(0,get(%0/_sheet`stunts`data`stunts-refresh)))]%r%tAfter the free stunts, [name(%0)] gets [u(ansi,setr(1,first(%q0,:)))] stunt[switch(%q1,1,,s)] for every [u(ansi,last(%q0,:))] refresh.
&FUN`RULESET`SKILLS Chargen Object=
&FUN`RULESET`SKILLS`DATA Chargen Object=
&FUN`RULESET`SKILLS`DATA`CAP Chargen Object=Player skills are capped at [u(ansi,ladder(%0))].
&FUN`RULESET`SKILLS`DATA`COLUMNS Chargen Object=Player skills [u(ansi,if(%0,DO,DO NOT))] obey column rules.
&FUN`RULESET`SKILLS`DATA`LIST Chargen Object=Players have the skill list [u(ansi,itemize(%0,|))].
&FUN`RULESET`SKILLS`DATA`POINTS Chargen Object=Players start with [u(ansi,%0)] skill point[switch(%0,1,,s)].
&FUN`RULESET`STRESS Chargen Object=
&FUN`RULESET`STRESS`DATA Chargen Object=
&FUN`RULESET`STRESS`DATA`CONS Chargen Object=Player characters have the following consequences: [u(ansi,itemize(iter(%0,first(%i0,`) (worth [last(%i0,`)] shifts),|,|),|))].
&FUN`RULESET`STRESS`DATA`MINIMUM Chargen Object=Stress tracks start at [u(ansi,%0)] box[switch(%0,1,,es)].
&FUN`RULESET`STRESS`DATA`TRACKS Chargen Object=Players have the stress tracks [u(ansi,itemize(iter(%0,[first(%i0,`)] ([switch(rest(%i0,`),@@(null string),unmodified,modified by [itemize(%$0,`)])]),|,|),|,and,;))].
&FUN`RULESET`STUNTS Chargen Object=
&FUN`RULESET`STUNTS`DATA Chargen Object=
&FUN`RULESET`STUNTS`DATA`FREE Chargen Object=Players get [u(ansi,%0)] free stunt[switch(%0,1,,s)].
&FUN`RULESET`STUNTS`DATA`STUNTS-REFRESH Chargen Object=Players get [u(ansi,setr(0,first(%0,:)))] stunt[switch(%q0,1,,s)] for every [u(ansi,last(%0,:))] refresh spent.
&FUN`SET Chargen Object=
&FUN`SET`ASPECTS Chargen Object=
&FUN`SET`ASPECTS`MAX Chargen Object=switch(0,[@@(Valid int?)]isint(%1),0[setq(e,Maximum aspects must be a whole number.)],[@@(Int > 0?)]gt(%1,0),0[setq(e,{The maximum must be at least 1. Without aspects, it's not Fate.})],1[setq(e,You set [name(%0)]'s Aspects/Max to [u(ansi,%1)].)][attrib_set(%0/_sheet`aspects`data`max,%1)])
&FUN`SET`ASPECTS`NAMES Chargen Object=switch(0,[@@(Correct format for all?)]lmath(and,iter(%1,strmatch(%i0,*`*),|)),0[setq(e,Aspect number and title must be separated by [u(ansi,`)] (to the left of 1 on US keyboards).)],[@@(Int, >0 and <max, for all?)][setq(m,get(%0/_sheet`aspects`data`max))]lmath(and,iter(%1,cand(isint(setr(i,first(%i0,`))),gt(%qi,0),lte(%qi,%qm)),|)),0[setq(e,{Aspect numbers must be whole numbers, greater than 0, and less than or equal to the maximum aspects ([u(ansi,%qm)]).})],[@@(Text given for all?)]lmath(and,iter(%1,gt(strlen(rest(%i0,`)),0),|)),0[setq(e,You must provide titles for all aspects you number.)],[@@(No repeats?)]eq(words(%1,|),words(setunion(iter(%1,first(%i0,`),|,|),,|),|)),0[setq(e,You must title each aspect only once.)],1[setq(e,[name(%0)]'s [itemize(iter(%1,u(ansi,ordinal(first(%i0,`))) aspect is titled '[u(ansi,rest(%i0,`))]',|,|),|,and,;)].)][attrib_set(%0/_sheet`aspects`data`names,%1)])
&FUN`SET`INITIATIVE Chargen Object=
&FUN`SET`INITIATIVE`BONUS Chargen Object=switch(0,[@@(Valid conflict? Sets into %qa and %qb.)][setq(b,rest(%1,/))]complete(iter(get(%0/_sheet`init`data`conflicts),first(%i0,`),|,|),first(%1,/),conflict type,a,|),0,[@@(Valid int?)]isint(%qb),0[setq(e,Initiative bonus value must be a whole number.)],1[setq(e,[name(%0)] now has a [u(ansi,switch(%qb,<0,%qb,+%qb))] modifier to %qa initiative.)][attrib_set(%0/_sheet`init`data`[edit(%qa,%b,_)]`bonus,%qb)])
&FUN`SET`INITIATIVE`CONFLICTS Chargen Object=switch(0,[@@(Valid skills for each?)]lmath(and,iter(%1,if(eq(1,words(%i0,`)),1[setq(a,insert(%qa,-1,%i0,|))],[setq(b,first(%i0,`))]lmath(and,iter(rest(%i0,`),if(complete(get(%0/_sheet`skills`data`list),%i0,skill,c,|),1[setq(b,insert(%qb,-1,%qc,`))][setq(f,insert(%qf,-1,'%qc' is okay.))],0[setq(f,insert(%qf,-1,%qe))]),`)[setq(a,insert(%qa,-1,%qb,|))])),|)),0[setq(e,%qf)],1[setq(e,[name(%0)] now has the conflict types [itemize(iter(%qa,u(ansi,first(%i0,`)) ([switch(rest(%i0,`),@@(blank),order not determined by skills,order determined by [itemize(iter(%$0,u(ansi,%i0),`,`),`)])]),|,|),|,and,;)].)][attrib_set(%0/_sheet`init`data`conflicts,%qa)])
&FUN`SET`INITIATIVE`ROLL Chargen Object=switch(0,match(0 1,%1),0[setq(e,Value must be 0 (false) or 1 (true).)],1[setq(e,[name(%0)] now [u(ansi,if(%1,WILL,WILL NOT))] add dice to initiative values.)][attrib_set(%0/_sheet`init`data`roll,%1)])
&FUN`SET`INITIATIVE`SPEED Chargen Object=switch(0,[@@(Valid conflict? Sets into %qa and %qb.)][setq(b,rest(%1,/))]complete(iter(get(%0/_sheet`init`data`conflicts),first(%i0,`),|,|),first(%1,/),conflict type,a,|),0,[@@(Valid int?)]isint(%qb),0[setq(e,Speed value must be a whole number.)],1[setq(e,[name(%0)] now has [u(ansi,switch(%qb,<1,normal,1,Inhuman,2,Supernatural,3,Mythic,Level %$0))] %qa Speed.)][attrib_set(%0/_sheet`init`data`[edit(%qa,%b,_)]`speed,%qb)])
&FUN`SET`REFRESH Chargen Object=
&FUN`SET`REFRESH`LEVEL Chargen Object=switch(0,[@@(Valid int?)]isint(%1),0[setq(e,Refresh level must be a whole number.)],[@@(Int >= 0?)]gte(%1,0),0[setq(e,{Refresh level cannot be less than zero.})],1[setq(e,You set [name(%0)]'s Refresh Level to [u(ansi,%1)].)][attrib_set(%0/_sheet`refresh,%1)])
&FUN`SET`SKILLS Chargen Object=
&FUN`SET`SKILLS`CAP Chargen Object=switch(0,[@@(Int?)]isint(%1),0[setq(e,Skill cap must be a whole number.)],1[setq(e,You set [name(%0)] to [switch(%1,<1,have [u(ansi,no)] skill cap.,cap skills at [u(ansi,[ladder(%1)])])].)][attrib_set(%0/_sheet`skills`data`cap,%1)])
&FUN`SET`SKILLS`COLUMNS Chargen Object=switch(0,[@@(Match 1 or 0?)]match(0 1,%1),0[setq(e,Skills/Columns must be either 1 (true) or 0 (false).)],1[setq(e,[name(%0)]'s skills now [u(ansi,if(%1,DO,DO NOT))] obey column rules.)][attrib_set(%0/_sheet`skills`data`columns,%1)])
&FUN`SET`SKILLS`LIST Chargen Object=1[setq(e,You set [name(%0)]'s skill list to [itemize(iter(setr(a,sort(%1,i,|)),u(ansi,%i0),|,|),|)].)][attrib_set(%0/_sheet`skills`data`list,%1)]
&FUN`SET`SKILLS`POINTS Chargen Object=switch(0,[@@(Int?)]isint(%1),0[setq(e,Skill point total must be a whole number.)],[@@(> 0?)]gt(%1,0),0[setq(e,Skill point total must be above 0.)],1[setq(e,You set [name(%0)] to have [u(ansi,%1)] skill point[switch(%1,1,,s)].)][attrib_set(%0/_sheet`skills`data`points,%1)])
&FUN`SET`STRESS Chargen Object=
&FUN`SET`STRESS`CONS Chargen Object=switch(0,[@@(All have a valid number?)]lmath(iter(%1,cand(isint(rest(%i0,`)),gt(rest(%i0,`),0)),|)),0[setq(e,All consequence slots must have a whole-number shift value greater than zero.)],1[setq(e,[name(%0)] now has the following general-use consequences: [itemize(iter(%1,u(ansi,first(%i0,`)) (worth [setr(i,rest(%i0,1))] shift[switch(%qi,1,,s)]),|,|),|)].)][attrib_set(%0/_sheet`stress`data`cons,%1)])
&FUN`SET`STRESS`MINIMUM Chargen Object=switch(0,[@@(Int?)]isint(%1),0[setq(e,Stress minimum must be a whole number.)],[@@(%1 >= 0?)]gte(%1,0),0[setq(e,Stress minimum must be at least 0.)],1[setq(e,[name(%0)]'s stress tracks will now start at [u(ansi,%1)] box[switch(%1,1,,es)].)][attrib_set(%0/_sheet`stress`data`minimum,%1)])
&FUN`SET`STRESS`TRACKS Chargen Object=switch(0,[@@(Valid skills for each?)]lmath(and,iter(%1,if(eq(1,words(%i0,`)),1[setq(a,insert(%qa,-1,%i0,|))],[setq(b,first(%i0,`))]lmath(and,iter(rest(%i0,`),if(complete(get(%0/_sheet`skills`data`list),%i0,skill,c,|),1[setq(b,insert(%qb,-1,%qc,`))][setq(f,insert(%qf,-1,'%qc' is okay.))],0[setq(f,insert(%qf,-1,%qe))]),`)[setq(a,insert(%qa,-1,%qb,|))])),|)),0[setq(e,%qf)],1[setq(e,[name(%0)] now has the stress tracks [itemize(iter(%qa,u(ansi,first(%i0,`)) ([switch(rest(%i0,`),@@(null string),unmodified,modified by [itemize(iter(%$0,u(ansi,%i0),`,`),`)])]),|,|),|,and,;)].)][attrib_set(%0/_sheet`stress`data`tracks,%qa)])
&FUN`SET`STUNTS Chargen Object=
&FUN`SET`STUNTS`FREE Chargen Object=switch(0,[@@(Int?)]isint(%1),0[setq(e,Number of free stunts must be an integer.)],[@@(>= 0?)]gte(%1,0),0[setq(e,Number of free stunts cannot be less than zero.)],1[setq(e,[name(%0)] will now have %1 free stunt[switch(%1,1,,s)].)][attrib_set(%0/_sheet`stunts`data`free,%1)])
&FUN`SET`STUNTS`STUNTS-REFRESH Chargen Object=switch(0,lmath(and,iter(%1,cand(isint(%i0),gt(%i0,0)),:)),0[setq(e,Both number of stunts and amount of refresh must be whole numbers greater than zero.)],1[setq(e,[name(%0)] will now get [u(ansi,first(%1,:))] stunt[switch(first(%i0,:),1,,s)] for every [u(ansi,last(%i0,:))] refresh.)][attrib_set(%0/_sheet`stunts`data`stunts-refresh,%1)])
&FUN`SET`TRACK Chargen Object=
&FUN`SET`TRACK`BONUS Chargen Object=switch(0,[@@(Valid stress track? Sets into %qa and %qb.)][setq(b,rest(%1,/))]complete(iter(get(%0/_sheet`stress`data`tracks),first(%i0,`),|,|),first(%1,/),stress track,a,|),0,[@@(Valid int?)]cand(isint(%qb),gt(%qb,0)),0[setq(e,Stress bonus must be a whole number greater than zero.)],1[setq(e,[name(%0)] now has [u(ansi,%qb)] bonus %qa stress box[switch(%qb,1,,es)].)][attrib_set(%0/_sheet`stress`[edit(%qa,%b,_)]`bonus,%qb)])
&FUN`SET`TRACK`CONS Chargen Object=switch(0,[@@(Valid stress track? Sets into %qa and %qb.)][setq(b,rest(%1,/))]complete(iter(get(%0/_sheet`stress`data`tracks),first(%i0,`),|,|),first(%1,/),stress track,a,|),0,[@@(Valid int?)]cand(isint(%qb),gte(%qb,0)),0[setq(e,Bonus mild consequences must be a whole number greater than or equal to zero.)],1[setq(e,{[name(%0)] now has %qb bonus mild %qa consequence[switch(%qb,1,,s)].})][attrib_set(%0/_sheet`stress`[edit(%qa,%b,_)]`cons,%qb)])
&FUN`SET`TRACK`OVERRIDE Chargen Object=switch(0,[@@(Valid stress track? Sets into %qa and %qb.)][setq(b,rest(%1,/))]complete(iter(get(%0/_sheet`stress`data`tracks),first(%i0,`),|,|),first(%1,/),stress track,a,|),0,[@@(Valid int?)]cand(isint(%qb),gt(%qb,0)),0[setq(e,Stress override must be a whole number greater than zero.)],1[setq(e,{Regardless of minimums and skills, [name(%0)]'s %qa track will now be [u(ansi,%qb)] box[switch(%qb,1,,es)] before bonuses are applied.})][attrib_set(%0/_sheet`stress`[edit(%qa,%b,_)]`override,%qb)])
&FUN`SET`TRACK`TOUGHNESS Chargen Object=switch(0,[@@(Valid stress track? Sets into %qa and %qb.)][setq(b,rest(%1,/))]complete(iter(get(%0/_sheet`stress`data`tracks),first(%i0,`),|,|),first(%1,/),stress track,a,|),0,[@@(Valid int?)]cand(isint(%qb),gte(%qb,0)),0[setq(e,Toughness amount must be a whole number greater than or equal to zero.)],1[setq(e,{[name(%0)]'s %qa track now has %qb 'Toughness' box[switch(%qb,1,,es)].})][attrib_set(%0/_sheet`stress`[edit(%qa,%b,_)]`toughness,%qb)])
&FUN`STRESS Chargen Object=
&FUN`STRESS`BOXES Chargen Object=[@@(Takes player %0 and full stress track name %1. Returns the total number of boxes that stress track would have, accounting for skills, bonuses, and overrides.)]add(udefault(%0/_sheet`stress`%1`override,add(get(%0/_sheet`stress`data`minimum),u(fun`stress`skillboxes,%0,%1))),get(%0/_sheet`stress`%1`bonus))
&FUN`STRESS`CONS Chargen Object=[@@(Takes player %0 and full stress track name %1. Returns the total number of bonus mild consequences, accounting for direct bonus consequences and high skill ratings.)]add([@@(Get bonuses.)]u(%0/_sheet`stress`%1`cons),switch([@@(Get skill name.)]rest(grab(get(%0/_sheet`stress`data`tracks),%1`*,|),`),[@@(Null string)],[@@(Assume zero.)]0,[@@(Else, calculate based on skill rating.)]max(0,div(sub(u(v(db_sheet)/fun`skill`rating,%0,%$0),3),2))))
&FUN`STRESS`SKILLBOXES Chargen Object=[@@(Takes player %0 and full stress track name %1. Returns the number of bonus boxes that skill would grant that stress track.)]switch([@@(Get the skill name for that stress track.)]rest(grab(get(%0/_sheet`stress`data`tracks),%1`*,|),`),,[@@(Null string, so no skill. Zero.)]0,[@@(String, so there's a skill. Switch based on its rating.)]switch(u(v(db_sheet)/fun`skill`rating,%0,%$0),<1,[@@(Below Average. No extra.)]0,<3,[@@(Below Good. +1 box.)]1,[@@(Good and above. +2 boxes.)]2))
&FUN`STUNTS Chargen Object=
&FUN`STUNTS`BUY Chargen Object=[@@(Set the evaluated code name, display name, and once-evaluated on-del code into %qe.)][attrib_set(%!/temp_%#,[elements(%q<stunt>,1 2 7,~)])][setq(e,u(temp_%#))]You buy "[elements(%q<stunt>,2,~)]" for a [switch(%q<cost>,<0,cost,refund)] of [abs(%q<cost>)] stunt slot[switch(abs(%q<cost>),1,,s)]. You now have [add(get(%#/_sheet`refresh),first(%q<calc>))] refresh and [switch(last(%q<calc>),0,no free stunts,1,1 free stunt,%$0 free stunts)] remaining.[@@(Set on-buy attribute.)][attrib_set(%!/temp_%#,[switch(elements(%q<stunt>,6,~),[@@(null string)],No special changes.,:*,[@@(Get attribute)][v(data`stunts`[delete(%$0,0,1)])],[@@(Run code.)]%$0)])]%r[u(ansi)] [u(temp_%#)][@@(Set the on-del into %qd.)][attrib_set(%!/temp_%#,elements(%q<stunt>,7,~))][setq(d,u(temp_%#))][@@(Set the player's stunt list.)][attrib_set(%#/_sheet`stunts`stunts,[insert(get(%#/_sheet`stunts`stunts),-1,[@@(Codename and display name.)][elements(%qe,1 2,~)]~[@@(Cost.)]%q<cost>~~[@@(On-del.)][last(%qe,~)],|)])][@@(If the on-del is an attribute, set it, once-evaluated, into the player.)][switch(%qd,:*,attrib_set(%#/_sheet`stunts`del`[delete(%$0,0,1)],[u(data`stunts`[delete(%$0,0,1)])]))][@@(Wipe the temp attribute.)][attrib_set(%!/temp_%#)]
&FUN`STUNTS`TEST1 Chargen Object=u(ansi) [switch(0,
&FUN`STUNTS`TEST2 Chargen Object=,u(fun`stunts`buy))]
