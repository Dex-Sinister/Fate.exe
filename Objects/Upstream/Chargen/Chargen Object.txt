@create Chargen Object

@@ Set DB_SHEET to the DBref of the +Sheet Object. This example assumes that the +Sheet Object is #6.
&DB_SHEET Chargen Object=#6

@link Chargen Object = #0
@set Chargen Object = WIZARD !NO_COMMAND
&ANSI +Sheet Object=ansi(gh,strfirstof(%0,<+sheet>))
&CMD +Sheet Object=
&CMD`SHEET +Sheet Object=$+sheet *:@break strmatch(%0,*/*);@pemit %#=u(ansi) [switch(0,[@@(Valid player? Set player into %q0 and name into %qn.)]t(setr(0,locate(%#,%0,Pym)))[setq(n,moniker(%q0))],'%0' is not a player.,[switch(%q0,%#,Your,%qn's)] sheet:%r%r[u(fun`sheet`full,%q0,%#)])]
&CMD`SHEET-NOARG +Sheet Object=$+sheet:@pemit %#=u(ansi) Your sheet:%r%r[u(fun`sheet`full,%#,%#)]
&CMD`SHEET/CAT +Sheet Object=$+sheet */*:@pemit %#=u(ansi) [switch(0,[@@(Valid player? Set player into %q0 and name into %qn.)]t(setr(0,locate(%#,strfirstof(%0,%#),Pym)))[setq(n,moniker(%q0))],'%0' is not a player.,[@@(Valid category? Sets it into %qc.)]complete(get(%q0/_sheet),%1,sheet category,c),%qe,[switch(%q0,%#,Your,%qn's)] %qc:%r%r[u(fun`sheet`%qc,%q0)])]
&FUN +Sheet Object=
&FUN`REFRESH +Sheet Object=
&FUN`REFRESH`CURRENT +Sheet Object=[@@(Takes player %0 and returns their current refresh.)][add(get(%0/_refresh),first(u(fun`stunts`calc,%0)))]
&FUN`SHEET +Sheet Object=
&FUN`SHEET`ASPECTS +Sheet Object=[@@(Takes player %0 and returns their aspects, including notes.)][localize([@@(Set the whole list of aspects into %q<aspects>, for use during the iter.)][setq(aspects,get(%0/_aspects))][@@(Set the list of aspect names into %q<names>, for use during the iter.)][setq(names,get(%0/_aspects`data`names))][iter(lnum(1,get(%0/_aspects`data`max)),[@@(Aspect special name.)][switch(grab(%q<names>,%i0`*,|),,[@@(Null string, so do nothing special.)],[@@(They made a grab. Prepend the aspect with it.)]%b%b[rest(%$0,`)]%r)][@@(Aspect number and name.)]%i0. [first(setr(0,elements(%q<aspects>,%i0,|)),`)][@@(Aspect note.)][switch(last(%q0,`),,[@@(Null string. Do nothing.)],[@@(Display the note.)]%r%t%$0)],%b,%r%r)])]
&FUN`SHEET`EXTRAS +Sheet Object=Placeholder
&FUN`SHEET`FULL +Sheet Object=iter(lnum(1,words(setr(a,get(%0/_sheet))),%b,2),lalign(repeat(setr(w,dec(div(width(%1),2)))%b,words(setr(b,elements(%qa,%i0 [inc(%i0)])))),iter(%qb,[ansi(ch,%i0:)]%r[u(fun`sheet`%i0,%0,%qw)],,|),|),,%r%r%r)
&FUN`SHEET`SKILLS +Sheet Object=[@@(Takes player %0 and displays their skills, choosing the correct column method.)]if(get(%0/_skills`columns),u(fun`sheet`skills`column,%0),u(fun`sheet`skills`nocolumn,%0))
&FUN`SHEET`SKILLS`COLUMN +Sheet Object=[@@(Takes player %0 and displays their skills, using column methods.)]localize([setq(slots,get(%0/_skills`slots),skills,get(%0/_skills`skills))][iter(lnum(u(fun`skill`highest,%0),1),[space(8)][ladder(%i0)] ([@@(How many skills at that rating?)][words(setr(0,graball(%q<skills>,*`%i0,|)),|)]/[@@(How many slots at that rating?)][max(0,last(grab(%q<slots>,%i0`*,|),`))]):%r[switch(%q0,,none,itemize(iter(%q0,first(%i0,`),|,|),|))],,%r)]%r%rSkill points: [u(fun`skill`points`column,%0)]/[get(%0/_skills`data`points)])
&FUN`SHEET`SKILLS`NOCOLUMN +Sheet Object=[@@(Takes player %0 and displays their skills, using no-column methods.)]if(hasattr(%0,_skills`skills),iter(get(%0/_skills`skills),first(%i0,`): [ladder(last(%i0,`))],|,%r),No skills chosen.)%r%rSkill points: [u(fun`skill`points`nocolumn,%#)]/[get(%#/_skills`data`points)]
&FUN`SHEET`STRESS +Sheet Object=[@@(Takes player %0 and column-width %1 and returns their stress tracks and consequence slots.)][@@(Show stress tracks.)][iter(get(%0/_stress`data`tracks),[ljust(first(%i0,`):,15)] [get(%0/_stress`tracks`[setr(0,edit(first(%i0,`),%b,_))])][switch(get(%0/_stress`tracks`%q0`toughness),[@@(null string)],[@@(do nothing)],%b(%$0))],|,%r)]%r%r[@@(Show general-user consequences.)][iter(get(%0/_stress`data`cons),align(16 [sub(setr(1,strfirstof(%1,width(%#))),17)],%b[first(%i0,`)]:,switch(get(%0/_stress`cons`[edit(first(%i0,`),%b,_)]),[@@(null string)],empty,%b[u(v(db_stress)/fun`con`show,%$0)])),|,%r)][iter(get(%0/_stress`data`tracks),switch(lattr(%0/_stress`tracks`[setr(0,edit(first(%i0,`),%b,_))]`mild`*),[@@(null string)],[@@(do nothing)],%r[iter(sort(%$0),align(16 [sub(%q1,17)],%b[first(%i1,`)] [last(%i0,`)]:,switch(get(%0/%i0),[@@(null string)],empty,%b[u(v(db_stress)/fun`con`show,%$0)])),,%r)]),|,)]
&FUN`SHEET`STUNTS +Sheet Object=[@@(Takes player %0 and displays all their stunts.)][iter(get(%0/_stunts`stunts),inum(0). [elements(%i0,2,~)] ([elements(%i0,3,~)]) [if(orflags(%#,WZw),ansi(xh,([first(%i0,~)])))][switch(elements(%i0,4,~),[@@(null string)],[@@(do nothing)],%r%t%$0)],|,%r)]%r%rRefresh: [add(setr(refresh,get(%0/_refresh)),first(setr(cost,u(fun`stunts`calc,%0))))]/%q<refresh>%rStunts until next refresh spent: [last(%q<cost>)]
&FUN`SKILL +Sheet Object=
&FUN`SKILL`HIGHEST +Sheet Object=[@@(Takes column-skilled player %0. Returns the highest of their skill cap or their highest-selected skill slot.)]max(get(%0/_skills`data`cap),lmath(max,iter(get(%0/_skills`slots),first(%i0,`),|,%b)))
&FUN`SKILL`POINTS +Sheet Object=
&FUN`SKILL`POINTS`COLUMN +Sheet Object=[@@(Takes column-skilled player %0, and returns their currently available skill points.)]lmath(sub,get(%0/_skills`data`points) [iter(get(%0/_skills`slots),mul(first(%i0,`),last(%i0,`)),|,%b)])
&FUN`SKILL`POINTS`NOCOLUMN +Sheet Object=[@@(Takes player %0 and calculates their remaining skill points, using no-column methods.)]sub(get(%0/_skills`data`points),lmath(add,iter(get(%0/_skills`skills),last(%i0,`),|,%b)))
&FUN`SKILL`RATING +Sheet Object=[@@(Takes player %0 and full skill name %1 and returns the skill's rating, or 0 if the player doesn't have it.)]max(0,last(grab(get(%0/_skills`skills),%1`*,|),`))
&FUN`STUNTS +Sheet Object=
&FUN`STUNTS`CALC +Sheet Object=[@@(Takes player %0 and optional stunt total %1. Accounts for free stunts and ratios, and returns "<refreshcost> <remainder>". To be used with setq.)]localize(switch([@@(Total stunts allocated.)]switch(%1,[@@(Null string)],u(fun`stunts`total,%0),%1),[@@(Not enough to cost refresh. Sets free stunts into %q<free>.)]>=[mul(-1,setr(free,get(%0/_stunts`data`free)))],[@@(Zero refresh cost.)]0 [@@(Add total allocation to free stunts.)][add(%$0,%q<free>)],[@@(Sets ratio into register. Stunts term into %q<stunts> and refresh term into %q<refresh>.)][iter(get(%0/_stunts`data`stunts-refresh),setq(switch(inum(0),1,stunts,refresh),%i0),:,)][@@(Second, calculate total cost. Sets full numerator into %q0.)][dec(div([@@(Multiply non-free stunts by the refresh term. Sets total term into %q0.)]inc(setr(0,mul(add(%$0,%q<free>),%q<refresh>))),[@@(Divide by stunts term.)]%q<stunts>))] [@@(Third and final, calculate modulo.)][modulo(%q0,%q<stunts>)]))
&FUN`STUNTS`COST +Sheet Object=[@@(Takes player %0 and stunt codename %1. Returns the number of stunts allocated to the first stunt matching that codename.)]elements(grab(get(%0/_stunts`stunts),%1~*,|),3,~)
&FUN`STUNTS`TOTAL +Sheet Object=[@@(Takes player %0 and returns their total stunt allocations.)]lmath(add,iter(get(%0/_stunts`stunts),elements(%i0,3,~),|))
&TEST +Sheet Object=iter(lnum(1,words(setr(a,get(%0/_sheet))),%b,2),lalign(repeat(setr(w,dec(div(width(%1),2)))%b,words(setr(b,elements(%qa,%i0 [inc(%i0)])))),iter(%qb,[ansi(ch,%i0:)]%r[u(fun`sheet`%i0,%0,%qw)],,|),|),,%r%r%r)
&TEST2 +Sheet Object=[@@(Takes player %0 and column-width %1 and returns their stress tracks and consequence slots.)][@@(Show stress tracks.)][iter(get(%0/_stress`data`tracks),[ljust(first(%i0,`):,15)] [get(%0/_stress`tracks`[setr(0,edit(first(%i0,`),%b,_))])][switch(get(%0/_stress`tracks`%q0`toughness),[@@(null string)],[@@(do nothing)],%b(%$0))],|,%r)]%r%r[@@(Show general-user consequences.)][iter(get(%0/_stress`data`cons),align(16 [sub(setr(1,strfirstof(%1,width(%#))),17)],%b[first(%i0,`)]:,switch(get(%0/_stress`cons`[edit(first(%i0,`),%b,_)]),[@@(null string)],empty,[u(fun`con`show,%$0)])),|,%r)][iter(get(%0/_stress`data`tracks),switch(lattr(%0/_stress`tracks`[setr(0,edit(first(%i0,`),%b,_))]`mild`*),[@@(null string)],[@@(do nothing)],%r[iter(sort(%$0),align(16 [sub(%q1,17)],%b[first(%i1,`)] [last(%i0,`)]:,switch(get(%0/%i0),[@@(null string)],empty,u(fun`con`show,%$0))),,%r)]),|,)]
